# Code generated by craft; DO NOT EDIT.

---
include:

  # semantic-release template
  - project: "to-be-continuous/semantic-release"
    ref: "3"
    file: "templates/gitlab-ci-semrel.yml"

  # Renovate template
  - project: "to-be-continuous/renovate"
    ref: "1"
    file: "templates/gitlab-ci-renovate.yml"

  # Docker template
  - project: "to-be-continuous/docker"
    ref: "5"
    file: "templates/gitlab-ci-docker.yml"

  # Node.js template
  - project: "to-be-continuous/node"
    ref: "3"
    file: "templates/gitlab-ci-node.yml"

  # SonarQube template
  - project: "to-be-continuous/sonar"
    ref: "4"
    file: "templates/gitlab-ci-sonar.yml"

variables:

  RENOVATE_AUTODISCOVER: "true"
  RENOVATE_AUTODISCOVER_FILTER: ${CI_PROJECT_PATH}

  CI_REGISTRY: ghcr.io

  DOCKER_HEALTHCHECK_DISABLED: "true" # https://docs.docker.com/reference/dockerfile/#healthcheck
  DOCKER_KANIKO_IMAGE: "gcr.io/kaniko-project/executor:debug"
  DOCKER_METADATA: |
    --label org.opencontainers.image.created=${CI_JOB_STARTED_AT}
    --label org.opencontainers.image.ref.name=${CI_COMMIT_REF_NAME}
    --label org.opencontainers.image.revision=${CI_COMMIT_SHA}
    --label org.opencontainers.image.version=${SEMREL_INFO_NEXT_VERSION}
  DOCKER_RELEASE_EXTRA_TAGS: "latest \\g<major>.\\g<minor> \\g<major"
  DOCKER_RELEASE_IMAGE: "${CI_REGISTRY_IMAGE}:${SEMREL_INFO_NEXT_VERSION}"
  DOCKER_SBOM_DISABLED: "true" # https://github.com/anchore/syft
  DOCKER_SEMREL_RELEASE_DISABLED: "true" # handled by docker build and push jobs to avoid too much dependency on semantic-release
  DOCKER_SNAPSHOT_IMAGE: "${CI_REGISTRY_IMAGE}:${SEMREL_INFO_NEXT_VERSION}"
  DOCKER_TRIVY_ARGS: "--ignore-unfixed --exit-code 1 --exit-on-eol 1"
  DOCKER_TRIVY_SECURITY_LEVEL_THRESHOLD: "MEDIUM,HIGH,CRITICAL"

  NODE_AUDIT_DISABLED: "false"
  NODE_BUILD_ARGS: "run build --prod"
  NODE_IMAGE: "registry.hub.docker.com/library/node:lts-alpine"
  NODE_LINT_ARGS: "run lint"
  NODE_LINT_ENABLED: "true"
  NODE_OUTDATED_ARGS: "--long"
  NODE_OUTDATED_DISABLED: "false"
  NODE_PUBLISH_ENABLED: "false"
  NODE_SBOM_DISABLED: "true"
  NODE_SEMGREP_DISABLED: "false" # https://semgrep.dev/docs/
  NODE_TEST_ARGS: "test -- --coverage"

  SONAR_HOST_URL: "https://sonarcloud.io"
  SONAR_BASE_ARGS: |
    -Dsonar.properties=sonar.properties
    -Dsonar.links.homepage=${CI_PROJECT_URL}
    -Dsonar.links.ci=${CI_PROJECT_URL}/-/pipelines
    -Dsonar.links.issue=${CI_PROJECT_URL}/-/issues
  SONAR_QUALITY_GATE_ENABLED: "true"

  GIT_AUTHOR_EMAIL: ${GITLAB_USER_EMAIL}
  GIT_COMMITTER_EMAIL: ${GITLAB_USER_EMAIL}

  SEMREL_TAG_FORMAT: v$${version}
  SEMREL_REQUIRED_PLUGINS_FILE: .gitlab/semrel-plugins.txt
  SEMREL_HOOKS_DIR: scripts
  SEMREL_INFO_ON: all
  SEMREL_RELEASE_DISABLED: "false"
  SEMREL_AUTO_RELEASE_ENABLED: "false"

semantic-release-info:
  after_script:
    - source "${SEMREL_CONFIG_DIR}/semrel.out.env" && rm "${SEMREL_CONFIG_DIR}/semrel.out.env"
    - >
      echo "BRANCH_SHA=$(echo "${CI_COMMIT_REF_NAME}" | sha256sum | cut -c -8)" >> "${SEMREL_CONFIG_DIR}/semrel.out.env"

      if [ "${SEMREL_INFO_NEXT_VERSION}" != "" ]; then
        echo "SEMREL_INFO_LAST_VERSION=v${SEMREL_INFO_LAST_VERSION#v}" >> "${SEMREL_CONFIG_DIR}/semrel.out.env"
        echo "SEMREL_INFO_NEXT_VERSION=v${SEMREL_INFO_NEXT_VERSION#v}" >> "${SEMREL_CONFIG_DIR}/semrel.out.env"
        echo "SEMREL_INFO_NEXT_VERSION_TYPE=${SEMREL_INFO_NEXT_VERSION_TYPE}" >> "${SEMREL_CONFIG_DIR}/semrel.out.env"
      else
        DESCRIBE=$(git describe --tags || echo "v1.0.0")
        echo "SEMREL_INFO_NEXT_VERSION=v${DESCRIBE#v}" >> "${SEMREL_CONFIG_DIR}/semrel.out.env"
        echo "SEMREL_INFO_NEXT_VERSION_TYPE=build" >> "${SEMREL_CONFIG_DIR}/semrel.out.env"
      fi
    - cat "${SEMREL_CONFIG_DIR}/semrel.out.env"

.renovate-rules: &renovate-rules
  rules:
    # see https://gitlab.com/to-be-continuous/renovate/-/blob/master/templates/gitlab-ci-renovate.yml?ref_type=heads#L348
    # update mode only with schedule triggering
    - if: $CI_PIPELINE_SOURCE == 'schedule'
      variables:
        RENOVATE_DRY_RUN: "false"
    # dry run with web triggering
    - if: $CI_PIPELINE_SOURCE == 'web'

renovate-validator:
  <<: *renovate-rules

renovate-depcheck:
  <<: *renovate-rules

netlify:
  stage: deploy
  image: node:lts-alpine
  environment:
    name: $ENV
    action: start
  variables:
    DIST_FOLDER: dist
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == 'true'
      variables:
        ARGS: "--prod"
        ENV: production
      when: manual
    - variables:
        ARGS: "--alias $BRANCH_SHA" # sha is coming from version.yml file with export from semantic-release-info job
        ENV: $CI_COMMIT_REF_NAME
      when: manual
  before_script:
    - npm install -g netlify-cli
  script:
    - netlify deploy --site "$NETLIFY_SITE_ID" --auth "$NETLIFY_AUTH_TOKEN" --dir "$DIST_FOLDER" "$ARGS"