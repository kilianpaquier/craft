# Code generated by craft; DO NOT EDIT.

name: Version
description: Compute the next release version or release it

inputs:
  download_dist:
    description: Whether to build artifact into dist folder or not
    default: "false"
  mode:
    description: |
      Action mode:
        - "dry_run" to only get the next version number
        - "draft" to get the next version number and create draft pull requests and releases
        - "release" to get the next version number and create pull requests, tags and releases
  token:
    description: Github access token
    required: true

outputs:
  branch_sha:
    description: The concerned branch sha256 value
    value: ${{ steps.version.outputs.branch_sha }}
  release:
    description: Whether a release can be made or not
    value: ${{ steps.version.outputs.release }}
  version:
    description: The computed version
    value: ${{ steps.version.outputs.version }}

runs:
  using: composite
  steps:
    - shell: bash
      run: |
        if [ "${MODE}" != "dry_run" ] && [ "${MODE}" != "draft" ] && [ "${MODE}" != "release" ]; then
          echo "invalid input mode '${MODE}', must be one of 'dry_run', 'draft', 'release'"
          exit 2
        fi

        if [ "${MODE}" != "dry_run" ] && [ "${GITHUB_REF_PROTECTED}" != "true" ]; then
          echo "invalid input mode '${MODE}', can't be 'draft' or 'release' when github branch isn't protected"
        fi
      env:
        MODE: ${{ inputs.mode }}
    - id: release_check
      shell: bash
      run: |
        BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
        echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

        case "${GITHUB_REF_NAME}" in
          main|master)
            echo "release=true" >> $GITHUB_OUTPUT
            ;;
          beta|staging)
            echo "release=false" >> $GITHUB_OUTPUT
            echo "identifier=beta" >> $GITHUB_OUTPUT
            ;;
          alpha|dev|develop|development)
            echo "release=false" >> $GITHUB_OUTPUT
            echo "identifier=alpha" >> $GITHUB_OUTPUT
            ;;
          next)
            echo "release=false" >> $GITHUB_OUTPUT
            echo "identifier=next" >> $GITHUB_OUTPUT
            ;;
        esac
    - shell: bash
      run: |
        envsubst < .github/release-please.config.jsonc > .github/release-please.envsubst.config.jsonc
        mv .github/release-please.envsubst.config.jsonc .github/release-please.config.jsonc
      env:
        DRAFT: ${{ inputs.mode != 'release' }}
        PRERELEASE: ${{ steps.release_check.outputs.release != 'true' }}
        PRERELEASE_IDENTIFIER: ${{ steps.release_check.outputs.identifier }}
    # https://github.com/marketplace/actions/release-please-action
    - id: release_please
      uses: googleapis/release-please-action@v4
      with:
        config-file: .github/release-please.config.jsonc
        manifest-file: .github/release-please.manifest.jsonc
        skip-github-pull-request: ${{ inputs.mode == 'dry_run' }} # don't create pull request in dry run mode
        skip-github-release: ${{ inputs.mode == 'dry_run' }} # don't create release in dry run mode
        target-branch: ${{ github.ref_name }}
        token: ${{ inputs.token }}
    - id: version
      shell: bash
      run: |
        echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT
        echo "release=${RELEASE}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
      env:
        VERSION: ${{ steps.release_please.outputs.tag_name }}
        RELEASE: ${{ steps.release_check.outputs.release }}
        BRANCH_SHA: ${{ steps.release_check.outputs.branch_sha }}
    # https://github.com/marketplace/actions/gh-release
    - uses: softprops/action-gh-release@v2
      if: ${{ inputs.mode != 'dry_run' }} # only upload assets when it's draft mode or release mode
      with:
        draft: ${{ inputs.mode != 'release' }}
        files: |
          CHANGELOG.md
        generate_release_notes: false
        prerelease: ${{ steps.version.outputs.release != 'true' }}
        tag_name: ${{ steps.release_please.outputs.tag_name }}
        target_commitish: ${{ github.ref_name }}
        token: ${{ inputs.token }}