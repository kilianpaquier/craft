# Code generated by craft; DO NOT EDIT.

name: Release
run-name: Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: Dry run
        type: boolean
        default: false
  push:
    branches:
      - main
      - master
      - staging
      - dev
      - develop
      - development
      - next
      - beta
      - alpha
  pull_request: # autolabeler on project pull requests (will only run version job)
    types: [opened, reopened, synchronize]
  pull_request_target: # autolabeler on fork pull requests (will only run version job)
    types: [opened, reopened, synchronize]

jobs:

  version:
    name: Version
    runs-on: ubuntu-latest
    outputs:
      branch_sha: ${{ steps.release.outputs.branch_sha }}
      identifier: ${{ steps.release.outputs.identifier }}
      release: ${{ steps.release.outputs.release }}
      version: ${{ steps.drafter.outputs.tag_name }}
    permissions:
      contents: write # create release
      pull-requests: write # autolabeler
    steps:
      - uses: actions/checkout@v4
      - id: release
        run: |
          BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
          echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

          case "${GITHUB_REF_NAME}" in
            main|master)
              echo "release=true" >> $GITHUB_OUTPUT
              echo "latest=true" >> $GITHUB_OUTPUT
              ;;
            beta|staging)
              echo "identifier=beta" >> $GITHUB_OUTPUT
              ;;
            alpha|dev|develop|development)
              echo "identifier=alpha" >> $GITHUB_OUTPUT
              ;;
            next)
              echo "identifier=next" >> $GITHUB_OUTPUT
              ;;
          esac
      # https://github.com/marketplace/actions/release-drafter
      - id: drafter
        uses: release-drafter/release-drafter@v6
        with:
          commitish: ${{ github.ref_name }}
          config-name: release-drafter.yml
          latest: ${{ steps.release.outputs.release == 'true' }}
          name: v$RESOLVED_VERSION
          prerelease-identifier: ${{ steps.release.outputs.identifier }}
          prerelease: ${{ steps.release.outputs.release != 'true' }}
          publish: false
          tag: v$RESOLVED_VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo $VERSION
        env:
          VERSION: ${{ steps.drafter.outputs.tag_name }}

  hugo-build:
    name: Hugo Build
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event_name, 'pull_request') }}
    needs: version
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true # fetch Hugo themes (true OR recursive)
          fetch-depth: 0 # fetch all history for .GitInfo and .Lastmod
      - uses: actions/cache@v4
        with:
          path: /home/runner/.cache/hugo_cache
          key: hugo-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            hugo-
      # https://github.com/marketplace/actions/hugo-setup
      - uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: latest
          extended: true
      - run: hugo --gc --minify --destination dist
      - uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: dist
          retention-days: 1
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist
          retention-days: 1

  pages:
    name: Pages
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == github.event.repository.default_branch && ! startsWith(github.event_name, 'pull_request') }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs:
      - hugo-build
    permissions:
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
          preview: ${{ inputs.dry_run }}

  netlify:
    name: Netlify
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event_name, 'pull_request') }}
    environment: netlify
    needs:
      - version
      - hugo-build
    permissions:
      deployments: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: build
        path: dist
    - uses: nwtgck/actions-netlify@v3
      with:
        alias: ${{ needs.version.outputs.branch_sha }}
        deploy-message: ${{ github.ref_name }}
        enable-commit-comment: false
        enable-commit-status: false
        github-deployment-environment: netlify
        github-token: ${{ secrets.GITHUB_TOKEN }}
        netlify-config-path: netlify.toml
        production-branch: ${{ github.event.repository.default_branch }}
        publish-dir: dist
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ github.ref_protected && ! startsWith(github.event_name, 'pull_request') }}
    environment: release
    needs:
      - version
      - hugo-build
      - pages
      - netlify
    permissions:
      contents: write # create release
      pull-requests: write # autolabeler
    steps:
      - uses: actions/checkout@v4
      # https://github.com/marketplace/actions/release-drafter
      - id: drafter
        uses: release-drafter/release-drafter@v6
        with:
          commitish: ${{ github.ref_name }}
          config-name: release-drafter.yml
          latest: ${{ needs.version.outputs.release == 'true' }}
          name: v$RESOLVED_VERSION
          prerelease-identifier: ${{ needs.version.outputs.identifier }}
          prerelease: ${{ needs.version.outputs.release != 'true' }}
          publish: ${{ ! inputs.dry_run }}
          tag: v$RESOLVED_VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo $VERSION
        env:
          VERSION: ${{ steps.drafter.outputs.tag_name }}
      # https://github.com/marketplace/actions/gh-release
      - uses: softprops/action-gh-release@v2
        with:
          draft: ${{ inputs.dry_run }}
          files: |
            CHANGELOG.md
            checksums.txt
          prerelease: ${{ needs.version.outputs.release != 'true' }}
          tag_name: ${{ steps.drafter.outputs.tag_name }}
          token: ${{ secrets.GITHUB_TOKEN }}