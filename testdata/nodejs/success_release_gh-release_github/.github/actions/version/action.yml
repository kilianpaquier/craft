# Code generated by craft; DO NOT EDIT.

name: Version
description: Compute the next release version or release it

inputs:
  download_dist:
    description: Whether to build artifact into dist folder or not
    default: "false"
  mode:
    description: |
      Action mode:
        - "dry_run" to only get the next version number
        - "draft" to get the next version number and create draft pull requests and releases
        - "release" to get the next version number and create pull requests, tags and releases
  token:
    description: Github access token
    required: true

outputs:
  branch_sha:
    description: The concerned branch sha256 value
    value: ${{ steps.version.outputs.branch_sha }}
  release:
    description: Whether a release can be made or not
    value: ${{ steps.version.outputs.release }}
  version:
    description: The computed version
    value: ${{ steps.version.outputs.version }}

runs:
  using: composite
  steps:
    - shell: bash
      run: |
        if [ "${MODE}" != "dry_run" ] && [ "${MODE}" != "draft" ] && [ "${MODE}" != "release" ]; then
          echo "invalid input mode '${MODE}', must be one of 'dry_run', 'draft', 'release'"
          exit 2
        fi

        if [ "${MODE}" != "dry_run" ] && [ "${GITHUB_REF_PROTECTED}" != "true" ]; then
          echo "invalid input mode '${MODE}', can't be 'draft' or 'release' when github branch isn't protected"
        fi
      env:
        MODE: ${{ inputs.mode }}
    - uses: actions/download-artifact@v4
      if: ${{ inputs.download_dist == 'true' }}
      with:
        name: build
        path: dist
    - id: release_check
      shell: bash
      run: |
        if [ "${GITHUB_REF_NAME}" = "main" ] || [ "${GITHUB_REF_NAME}" = "master" ]; then
          echo "release=true" >> $GITHUB_OUTPUT
        else
          echo "release=false" >> $GITHUB_OUTPUT
        fi
    # https://github.com/marketplace/actions/gh-release
    - id: gh_release
      uses: softprops/action-gh-release@v2
      with:
        draft: ${{ inputs.mode != 'release' }}
        files: |
          CHANGELOG.md
        generate_release_notes: true
        prerelease: ${{ needs.release_check.outputs.release == 'false' }}
        target_commitish: ${{ github.ref_name }}
        token: ${{ inputs.token }}
    - uses: actions/github-scripts@v7
      if: ${{ inputs.mode == 'dry_run' }} # delete release in case of dry_run since we only desired the next version number
      with:
        script: |
          github.rest.repos.deleteRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ steps.gh_release.outputs.id }}
          })
    - id: version
      shell: bash
      run: |
        BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
        echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

        echo "release=${RELEASE}" >> $GITHUB_OUTPUT
        echo "version=${RELEASE_URL##*/}" >> $GITHUB_OUTPUT # remove everything before the last / in the URL (should more or less match the tag name ...)
      env:
        RELEASE_URL: ${{ steps.gh_release.outputs.url }}
        RELEASE: ${{ steps.release_check.outputs.release }}
    - shell: bash
      run: echo $VERSION
      env:
        VERSION: ${{ steps.version.outputs.version }}