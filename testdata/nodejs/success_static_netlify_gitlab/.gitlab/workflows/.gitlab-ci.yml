# Code generated by craft; DO NOT EDIT.

---
include:

  # semantic-release template
  - project: "to-be-continuous/semantic-release"
    ref: "3"
    file: "templates/gitlab-ci-semrel.yml"

  # Node.js template
  - project: "to-be-continuous/node"
    ref: "3"
    file: "templates/gitlab-ci-node.yml"

variables:

  NODE_AUDIT_DISABLED: "false"
  NODE_BUILD_ARGS: "run build --prod"
  NODE_IMAGE: "registry.hub.docker.com/library/node:lts-alpine"
  NODE_LINT_ARGS: "run lint"
  NODE_LINT_ENABLED: "true"
  NODE_OUTDATED_ARGS: "--long"
  NODE_OUTDATED_DISABLED: "false"
  NODE_PUBLISH_ENABLED: "false"
  NODE_SBOM_DISABLED: "true"
  NODE_SEMGREP_DISABLED: "false" # https://semgrep.dev/docs/
  NODE_TEST_ARGS: "test -- --coverage"

  GIT_AUTHOR_EMAIL: ${GITLAB_USER_EMAIL}
  GIT_COMMITTER_EMAIL: ${GITLAB_USER_EMAIL}

  SEMREL_TAG_FORMAT: v$${version}
  SEMREL_REQUIRED_PLUGINS_FILE: .gitlab/semrel-plugins.txt
  SEMREL_HOOKS_DIR: scripts
  SEMREL_INFO_ON: all
  SEMREL_RELEASE_DISABLED: "true"
  SEMREL_AUTO_RELEASE_ENABLED: "false"

semantic-release-info:
  after_script:
    - source "${SEMREL_CONFIG_DIR}/semrel.out.env" && rm "${SEMREL_CONFIG_DIR}/semrel.out.env"
    - >
      echo "BRANCH_SHA=$(echo "${CI_COMMIT_REF_NAME}" | sha256sum | cut -c -8)" >> "${SEMREL_CONFIG_DIR}/semrel.out.env"

      if [ "${SEMREL_INFO_NEXT_VERSION}" != "" ]; then
        echo "SEMREL_INFO_LAST_VERSION=v${SEMREL_INFO_LAST_VERSION#v}" >> "${SEMREL_CONFIG_DIR}/semrel.out.env"
        echo "SEMREL_INFO_NEXT_VERSION=v${SEMREL_INFO_NEXT_VERSION#v}" >> "${SEMREL_CONFIG_DIR}/semrel.out.env"
        echo "SEMREL_INFO_NEXT_VERSION_TYPE=${SEMREL_INFO_NEXT_VERSION_TYPE}" >> "${SEMREL_CONFIG_DIR}/semrel.out.env"
      else
        DESCRIBE=$(git describe --tags || echo "v1.0.0")
        echo "SEMREL_INFO_NEXT_VERSION=v${DESCRIBE#v}" >> "${SEMREL_CONFIG_DIR}/semrel.out.env"
        echo "SEMREL_INFO_NEXT_VERSION_TYPE=build" >> "${SEMREL_CONFIG_DIR}/semrel.out.env"
      fi
    - cat "${SEMREL_CONFIG_DIR}/semrel.out.env"

netlify:
  stage: deploy
  image: node:lts-alpine
  environment:
    name: $ENV
    action: start
  variables:
    DIST_FOLDER: dist
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == 'true'
      variables:
        ARGS: "--prod"
        ENV: production
      when: manual
    - variables:
        ARGS: "--alias $BRANCH_SHA" # sha is coming from version.yml file with export from semantic-release-info job
        ENV: $CI_COMMIT_REF_NAME
      when: manual
  before_script:
    - npm install -g netlify-cli
  script:
    - netlify deploy --site "$NETLIFY_SITE_ID" --auth "$NETLIFY_AUTH_TOKEN" --dir "$DIST_FOLDER" "$ARGS"