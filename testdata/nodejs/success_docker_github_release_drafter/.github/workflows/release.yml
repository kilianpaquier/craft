# Code generated by craft; DO NOT EDIT.

name: Release
run-name: Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: Dry run
        type: boolean
        default: false
  pull_request: # autolabeler on project pull requests (will only run version job)
    types: [opened, reopened, synchronize]
  pull_request_target: # autolabeler on fork pull requests (will only run version job)
    types: [opened, reopened, synchronize]

jobs:

  version:
    name: Version
    runs-on: ubuntu-latest
    outputs:
      branch_sha: ${{ steps.release.outputs.branch_sha }}
      identifier: ${{ steps.release.outputs.identifier }}
      release: ${{ steps.release.outputs.release }}
      version: ${{ steps.drafter.outputs.tag_name }}
    permissions:
      contents: write # create release
      pull-requests: write # autolabeler
    steps:
      - uses: actions/checkout@v4
      - id: release
        run: |
          BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
          echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

          case "${GITHUB_REF_NAME}" in
            main|master)
              echo "release=true" >> $GITHUB_OUTPUT
              echo "latest=true" >> $GITHUB_OUTPUT
              ;;
            beta|staging)
              echo "identifier=beta" >> $GITHUB_OUTPUT
              ;;
            alpha|dev|develop|development)
              echo "identifier=alpha" >> $GITHUB_OUTPUT
              ;;
            next)
              echo "identifier=next" >> $GITHUB_OUTPUT
              ;;
          esac
      # https://github.com/marketplace/actions/release-drafter
      - id: drafter
        uses: release-drafter/release-drafter@v6
        with:
          commitish: ${{ github.ref_name }}
          config-name: release-drafter.yml
          latest: ${{ steps.release.outputs.release == 'true' }}
          name: v$RESOLVED_VERSION
          prerelease-identifier: ${{ steps.release.outputs.identifier }}
          prerelease: ${{ steps.release.outputs.release != 'true' }}
          publish: false
          tag: v$RESOLVED_VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo $VERSION
        env:
          VERSION: ${{ steps.drafter.outputs.tag_name }}

  node-build:
    name: Node Build
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event_name, 'pull_request') }}
    needs: version
    environment: release
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: lts/*
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist
          retention-days: 1
      # https://github.com/marketplace/actions/npm-publish
      - uses: JS-DevTools/npm-publish@v3
        with:
          dry-run: ${{ inputs.dry_run }}
          tag: ${{ needs.version.outputs.version }}
          token: ${{ secrets.NPM_TOKEN }}

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event_name, 'pull_request') }}
    environment: docker
    needs: version
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - id: image
        run: |
          IMAGE="$GITHUB_REPOSITORY"
          if [ "$RELEASE" != "true" ]; then
            IMAGE="$IMAGE/snapshot"
          fi
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
        env:
          RELEASE: ${{ needs.version.outputs.release }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image.outputs.image }}
          labels: |
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.ref.name="${{ github.ref_name }}"
            org.opencontainers.image.version="${{ needs.version.outputs.version }}"
            org.opencontainers.image.revision="${{ github.sha }}"
          tags: |
            type=raw,enable={{is_default_branch}},value=latest
            type=semver,enable=true,pattern={{raw}},value=${{ needs.version.outputs.version }}
            type=semver,enable=${{ needs.version.outputs.release == 'true' }},pattern=v{{major}}.{{minor}},value=${{ needs.version.outputs.version }}
            type=semver,enable=${{ needs.version.outputs.release == 'true' }},pattern=v{{major}},value=${{ needs.version.outputs.version }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  docker-trivy:
    name: Docker Trivy
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event_name, 'pull_request') }}
    environment: docker
    permissions:
      security-events: write
    needs:
      - version
      - docker-build
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@master
        with:
          format: sarif
          ignore-unfixed: false
          image-ref: "${{ needs.docker-build.outputs.image }}:${{ needs.version.outputs.version }}"
          output: trivy-results.sarif
          severity: MEDIUM,HIGH,CRITICAL
        env:
          TRIVY_USERNAME: ${{ github.repository_owner }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}
      - uses: github/codeql-action/upload-sarif@v3
        with:
          category: docker-trivy
          sarif_file: trivy-results.sarif
      - uses: aquasecurity/trivy-action@master
        with:
          exit-code: "1"
          ignore-unfixed: false
          image-ref: "${{ needs.docker-build.outputs.image }}:${{ needs.version.outputs.version }}"
          severity: MEDIUM,HIGH,CRITICAL
        env:
          TRIVY_USERNAME: ${{ github.repository_owner }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ github.ref_protected && ! startsWith(github.event_name, 'pull_request') }}
    environment: release
    needs:
      - version
      - node-build
      - docker-build
    permissions:
      contents: write # create release
      pull-requests: write # autolabeler
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist
      # https://github.com/marketplace/actions/release-drafter
      - id: drafter
        uses: release-drafter/release-drafter@v6
        with:
          commitish: ${{ github.ref_name }}
          config-name: release-drafter.yml
          latest: ${{ needs.version.outputs.release == 'true' }}
          name: v$RESOLVED_VERSION
          prerelease-identifier: ${{ needs.version.outputs.identifier }}
          prerelease: ${{ needs.version.outputs.release != 'true' }}
          publish: ${{ ! inputs.dry_run }}
          tag: v$RESOLVED_VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo $VERSION
        env:
          VERSION: ${{ steps.drafter.outputs.tag_name }}
      # https://github.com/marketplace/actions/gh-release
      - uses: softprops/action-gh-release@v2
        with:
          draft: ${{ inputs.dry_run }}
          files: |
            CHANGELOG.md
            checksums.txt
          prerelease: ${{ needs.version.outputs.release != 'true' }}
          tag_name: ${{ steps.drafter.outputs.tag_name }}
          token: ${{ secrets.GITHUB_TOKEN }}