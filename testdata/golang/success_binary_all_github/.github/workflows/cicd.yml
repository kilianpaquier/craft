# Code generated by craft; DO NOT EDIT.

name: CICD
run-name: CICD

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  push:
    branches:
      - alpha
      - beta
      - dev
      - develop
      - development
      - next
      - staging
      - main
      - master
      - v[0-9]+.x
      - v[0-9]+.[0-9]+.x
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  version:
    name: Version
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false && github.ref_protected == false) }}
    environment: version
    outputs:
      branch_sha: ${{ steps.version.outputs.branch_sha }}
      release: ${{ steps.version.outputs.release }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - id: version
        run: |
          echo "branch_sha=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)" >> $GITHUB_OUTPUT
          DESCRIBE=$(git describe --tags || echo "v1.0.0")
          echo "version=v${DESCRIBE#v}" >> $GITHUB_OUTPUT
          echo "release=$([ "${GITHUB_EVENT_NAME}" = "push" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
      - run: echo ${VERSION}
        env:
          VERSION: ${{ steps.version.outputs.version }}

  golang:
    name: Golang
    needs: version
    uses: ./.github/workflows/golang.yml
    permissions:
      checks: write
    with:
      event_name: ${{ github.event_name }}
      version: ${{ needs.version.outputs.version }}
    secrets: inherit

  docker:
    name: Docker
    runs-on: ubuntu-latest
    environment: docker
    needs:
      - version
      - golang
    permissions:
      contents: write
      issues: write
      pull-requests: write
      security-events: write
    steps:
      - id: image
        run: |
          if [ "${RELEASE}" != "true" ]; then
            IMAGE="${GIT_REPOSITORY}/snapshot"
          fi
          echo "image=${GIT_REPOSITORY}" >> $GITHUB_OUTPUT
        env:
          RELEASE: ${{ needs.version.outputs.release }}
      - uses: ./.github/actions/docker
        with:
          image: ${{ steps.image.outputs.image }}
          registry_token: ${{ secrets.REGISTRY_TOKEN }}
          registry: example.com
          version: ${{ needs.version.outputs.version }}