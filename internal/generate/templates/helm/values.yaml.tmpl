# Code generated by craft; DO NOT EDIT.

<<- $kubeVersion := "v1.27" >>
<<- $maintainer := index .maintainers 0 >>

<< with .imagePullSecrets >>
imagePullSecrets:
  <<- toYaml . | nindent 2 >>
<< else ->>
imagePullSecrets: []
<<- end >>

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: << .serviceAccount.create | default "false" >>
  # Annotations to add to the service account
  <<- with .serviceAccount.annotations >>
  annotations:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  annotations: {}
  <<- end >>
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: << .serviceAccount.name | default ("" | quote) >>

ingress:
  enabled: << .ingress.enabled | default "false" >>
  className: << .ingress.className | default ("" | quote) >>
  <<- with .ingress.annotations >>
  annotations:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  <<- end >>
  <<- with .ingress.hosts >>
  hosts:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  hosts: []
    # - chart-example.local
  <<- end >>
  <<- with .ingress.tls >>
  tls:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
  <<- end >>

#############################################
#                   api                     #
#############################################
<<- if not (kindIs "invalid" .api) >>
api:
  paused: true
  replicaCount: << .api.replicaCount | default 1 >>
  image:
    registry: << .api.image.registry | default $.docker.registry | default "" >>/
    repository: << .api.image.repository | default $.projectPath >>
    pullPolicy: << .api.image.pullPolicy | default "IfNotPresent" >>
    # Overrides the image tag whose default is the chart appVersion.
    tag: << .api.image.tag | default "" | quote >>
  env:
    <<- $env := merge (dict "BINARY_NAME" "api") (dict "BINARY_PORT" ($.docker.port | default 3000)) .api.env >>
    <<- toYaml $env | nindent 4 >>
  <<- with .api.envFrom >>
  envFrom:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  envFrom: []
    # - prefix: ""
    #   configMapRef:
    #     name: ""
    #   secretRef:
    #     name: ""
  <<- end >>
  
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#probe-v1-core
  << with .api.livenessProbe ->>
  livenessProbe:
    <<- toYaml . | nindent 4 >>
  << else ->>
  livenessProbe: false
    # httpGet:
    #   httpHeaders:
    #     header-name: value
    #   path: /unsecured/ping
    #   port: << $.docker.port | default 3000 >>
    #   scheme: http
    # initialDelaySeconds: 15
    # periodSeconds: 10
    # successThreshold: 1
    # failureThreshold: 3
  <<- end >>
  <<- with .api.readinessProbe >>
  readinessProbe:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  readinessProbe: false
    # exec:
    #   command: ["ls", "-lart"]
    # initialDelaySeconds: 15
    # periodSeconds: 10
    # successThreshold: 1
    # failureThreshold: 3
  <<- end >>
  <<- with .api.startupProbe >>
  startupProbe:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  startupProbe: false
    # grpc:
    #   port: << $.docker.port | default 3000 >>
    #   service: ""
    # initialDelaySeconds: 15
    # periodSeconds: 10
    # successThreshold: 1
    # failureThreshold: 3
  <<- end >>
  resources:
    limits:
      cpu: << .api.resources.limits.cpu | default "250m" >>
      memory: << .api.resources.limits.memory | default "256Mi" >>
      storage: << .api.resources.limits.storage | default "10Gi" >>
    requests:
      cpu: << .api.resources.requests.cpu | default "50m" >>
      memory: << .api.resources.requests.memory | default "128Mi" >>
      storage: << .api.resources.requests.storage | default "5Gi" >>
  autoscaling:
    enabled: << .api.autoscaling.enabled | default "false" >>
    minReplicas: << .api.autoscaling.minReplicas | default 1 >>
    maxReplicas: << .api.autoscaling.maxReplicas | default 10 >>
    targetCPUUtilizationPercentage: << .api.autoscaling.targetCPUUtilizationPercentage | default 80 >>
    targetMemoryUtilizationPercentage: << .api.autoscaling.targetMemoryUtilizationPercentage | default 80 >>
  restartPolicy: << .api.restartPolicy | default "Always" >>
  <<- with .api.configMap >>
  configMap:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  configMap: {}
    # mountPoint: /etc/config/
    # tpl_folders: # folders to be included in configmap with tpl
    #   - folder_name
    # include_folders: # folders to be included in configmap without tpl
    #   - folder_name
    # data:
    #   name: value
  <<- end >>
  
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#volume-v1-core
  <<- with .api.volumes >>
  volumes:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  volumes: []
    # - name: ""
    #   configMap:
    #     name: configMapName
    # - name: ""
    #   emptyDir:
    #     medium: ""
    #     sizeLimit: 1Gi
    # - name: ""
    #   persistentVolumeClaim:
    #     claimName: ""
    #     readOnly: false
    # - name: ""
    #   secret: 
    #     secretName: ""
  <<- end >>
  <<- with .api.volumeMounts >>
  volumeMounts:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  volumeMounts: []
    # - mountPath: /etc/config/
    #   name: volume[*].name
    #   readOnly: true
  <<- end >>
  
  << with .api.podAnnotations ->>
  podAnnotations:
    <<- toYaml . | nindent 4 >>
  << else ->>
  podAnnotations: {}
  <<- end >>
  
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#podsecuritycontext-v1-core
  <<- with .api.podSecurityContext >>
  podSecurityContext:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  podSecurityContext: {}
  <<- end >>
    # fsGroup: 2
    # fsGroupChangePolicy: Always | OnRootMismatch
    # runAsGroup: 1001
    # runAsNonRoot: true
    # runAsUser: 1001
  
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#securitycontext-v1-core
  <<- with .api.securityContext >>
  securityContext:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  securityContext: {}
    # allowPrivilegeEscalation: false
    # capabilities:
    #   add: []
    #   drop: []
    # privileged: false
    # readOnlyRootFilesystem: true
    # runAsGroup: 1001
    # runAsNonRoot: true
    # runAsUser: 1001
  <<- end >>
  
  << with .api.nodeSelector ->>
  nodeSelector:
    <<- toYaml . | nindent 4 >>
  << else ->>
  nodeSelector: {}
  <<- end >>
  
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#toleration-v1-core
  <<- with .api.tolerations >>
  tolerations:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  tolerations: []
    # - effect: NoSchedule | PreferNoSchedule | NoExecute
    #   key: ""
    #   operator: Exists | Equal
    #   tolerationSeconds: 600
    #   value: ""
  <<- end >>
  
  # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#affinity-v1-core
  <<- with .api.affinity >>
  affinity:
    <<- toYaml . | nindent 4 >>
  <<- else >>
  affinity: {}
  <<- end >>
<<- else >>
api: {}
<<- end >>

#############################################
#               all cronjobs                #
#############################################
<<- with .crons >>
crons:
<<- range $name, $config := . >>
  << $name >>:
    suspend: true
    schedule: << $config.schedule | default "*/1 * * * *" | quote >>
    concurrencyPolicy: << $config.concurrencyPolicy | default "Forbid" >>
    completionMode: << $config.completionMode | default "NonIndexed" >>
    completions: << $config.completions | default 1 >>
    parallelism: << $config.parallelism | default 1 >>
    image:
      registry: << $config.image.registry | default $.docker.registry | default "" >>/
      repository: << $config.image.repository | default $.projectPath >>
      pullPolicy: << $config.image.pullPolicy | default "IfNotPresent" >>
      # Overrides the image tag whose default is the chart appVersion.
      tag: << $config.image.tag | default "" | quote >>
    env:
      <<- $env := merge (dict "BINARY_NAME" $name) (dict "BINARY_PORT" ($.docker.port | default 3000)) $config.env >>
      <<- toYaml $env | nindent 6 >>
    <<- with $config.envFrom >>
    envFrom:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    envFrom: []
      # - prefix: ""
      #   configMapRef:
      #     name: ""
      #   secretRef:
      #     name: ""
    <<- end >>
    resources:
      limits:
        cpu: << $config.resources.limits.cpu | default "250m" >>
        memory: << $config.resources.limits.memory | default "256Mi" >>
        storage: << $config.resources.limits.storage | default "10Gi" >>
      requests:
        cpu: << $config.resources.requests.cpu | default "50m" >>
        memory: << $config.resources.requests.memory | default "128Mi" >>
        storage: << $config.resources.requests.storage | default "5Gi" >>
    failedJobsHistoryLimit: << $config.failedJobsHistoryLimit | default 3 >>
    successfulJobsHistoryLimit: << $config.successfulJobsHistoryLimit | default 3 >>
    restartPolicy: << $config.restartPolicy | default "OnFailure" >>
    <<- with $config.configMap >>
    configMap:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    configMap: {}
      # mountPoint: /etc/config/
      # tpl_folders: # folders to be included in configmap with tpl
      #   - folder_name
      # include_folders: # folders to be included in configmap without tpl
      #   - folder_name
      # data:
      #   name: value
    <<- end >>
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#volume-v1-core
    <<- with $config.volumes >>
    volumes:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    volumes: []
      # - name: ""
      #   configMap:
      #     name: configMapName
      # - name: ""
      #   emptyDir:
      #     medium: ""
      #     sizeLimit: 1Gi
      # - name: ""
      #   persistentVolumeClaim:
      #     claimName: ""
      #     readOnly: false
      # - name: ""
      #   secret: 
      #     secretName: ""
    <<- end >>
    <<- with $config.volumeMounts >>
    volumeMounts:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    volumeMounts: []
      # - mountPath: /etc/config/
      #   name: volume[*].name
      #   readOnly: true
    <<- end >>
    
    << with $config.podAnnotations ->>
    podAnnotations:
      <<- toYaml . | nindent 6 >>
    << else ->>
    podAnnotations: {}
    <<- end >>
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#podsecuritycontext-v1-core
    <<- with $config.podSecurityContext >>
    podSecurityContext:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    podSecurityContext: {}
    <<- end >>
      # fsGroup: 2
      # fsGroupChangePolicy: Always | OnRootMismatch
      # runAsGroup: 1001
      # runAsNonRoot: true
      # runAsUser: 1001
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#securitycontext-v1-core
    <<- with $config.securityContext >>
    securityContext:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    securityContext: {}
      # allowPrivilegeEscalation: false
      # capabilities:
      #   add: []
      #   drop: []
      # privileged: false
      # readOnlyRootFilesystem: true
      # runAsGroup: 1001
      # runAsNonRoot: true
      # runAsUser: 1001
    <<- end >>
    
    << with $config.nodeSelector ->>
    nodeSelector:
      <<- toYaml . | nindent 6 >>
    << else ->>
    nodeSelector: {}
    <<- end >>
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#toleration-v1-core
    <<- with $config.tolerations >>
    tolerations:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    tolerations: []
      # - effect: NoSchedule | PreferNoSchedule | NoExecute
      #   key: ""
      #   operator: Exists | Equal
      #   tolerationSeconds: 600
      #   value: ""
    <<- end >>
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#affinity-v1-core
    <<- with $config.affinity >>
    affinity:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    affinity: {}
    <<- end >>
<< end >>
<<- else >>
crons: {}
<<- end >>

#############################################
#                 all jobs                  #
#############################################
<<- with .jobs >>
jobs:
<<- range $name, $config := . >>
  << $name >>:
    suspend: true
    completionMode: << $config.completionMode | default "NonIndexed" >>
    completions: << $config.completions | default 1 >>
    parallelism: << $config.parallelism | default 1 >>
    <<- with $config.ttlSecondsAfterFinished >>
    ttlSecondsAfterFinished: << . >>
    <<- end >>
    image:
      registry: << $config.image.registry | default $.docker.registry | default "" >>/
      repository: << $config.image.repository | default $.projectPath >>
      pullPolicy: << $config.image.pullPolicy | default "IfNotPresent" >>
      # Overrides the image tag whose default is the chart appVersion.
      tag: << $config.image.tag | default "" | quote >>
    env:
      <<- $env := merge (dict "BINARY_NAME" $name) (dict "BINARY_PORT" ($.docker.port | default 3000)) $config.env >>
      <<- toYaml $env | nindent 6 >>
    <<- with $config.envFrom >>
    envFrom:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    envFrom: []
      # - prefix: ""
      #   configMapRef:
      #     name: ""
      #   secretRef:
      #     name: ""
    <<- end >>
    resources:
      limits:
        cpu: << $config.resources.limits.cpu | default "250m" >>
        memory: << $config.resources.limits.memory | default "256Mi" >>
        storage: << $config.resources.limits.storage | default "10Gi" >>
      requests:
        cpu: << $config.resources.requests.cpu | default "50m" >>
        memory: << $config.resources.requests.memory | default "128Mi" >>
        storage: << $config.resources.requests.storage | default "5Gi" >>
    restartPolicy: << $config.RestartPolicy | default "OnFailure" >>
    <<- with $config.configMap >>
    configMap:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    configMap: {}
      # mountPoint: /etc/config/
      # tpl_folders: # folders to be included in configmap with tpl
      #   - folder_name
      # include_folders: # folders to be included in configmap without tpl
      #   - folder_name
      # data:
      #   name: value
    <<- end >>
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#volume-v1-core
    <<- with $config.volumes >>
    volumes:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    volumes: []
      # - name: ""
      #   configMap:
      #     name: configMapName
      # - name: ""
      #   emptyDir:
      #     medium: ""
      #     sizeLimit: 1Gi
      # - name: ""
      #   persistentVolumeClaim:
      #     claimName: ""
      #     readOnly: false
      # - name: ""
      #   secret: 
      #     secretName: ""
    <<- end >>
    <<- with $config.volumeMounts >>
    volumeMounts:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    volumeMounts: []
      # - mountPath: /etc/config/
      #   name: volume[*].name
      #   readOnly: true
    <<- end >>
    
    << with $config.podAnnotations ->>
    podAnnotations:
      <<- toYaml . | nindent 6 >>
    << else ->>
    podAnnotations: {}
    <<- end >>
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#podsecuritycontext-v1-core
    <<- with $config.podSecurityContext >>
    podSecurityContext:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    podSecurityContext: {}
    <<- end >>
      # fsGroup: 2
      # fsGroupChangePolicy: Always | OnRootMismatch
      # runAsGroup: 1001
      # runAsNonRoot: true
      # runAsUser: 1001
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#securitycontext-v1-core
    <<- with $config.securityContext >>
    securityContext:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    securityContext: {}
      # allowPrivilegeEscalation: false
      # capabilities:
      #   add: []
      #   drop: []
      # privileged: false
      # readOnlyRootFilesystem: true
      # runAsGroup: 1001
      # runAsNonRoot: true
      # runAsUser: 1001
    <<- end >>
    
    << with $config.nodeSelector ->>
    nodeSelector:
      <<- toYaml . | nindent 6 >>
    << else ->>
    nodeSelector: {}
    <<- end >>
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#toleration-v1-core
    <<- with $config.tolerations >>
    tolerations:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    tolerations: []
      # - effect: NoSchedule | PreferNoSchedule | NoExecute
      #   key: ""
      #   operator: Exists | Equal
      #   tolerationSeconds: 600
      #   value: ""
    <<- end >>
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#affinity-v1-core
    <<- with $config.affinity >>
    affinity:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    affinity: {}
    <<- end >>
<< end >>
<<- else >>
jobs: {}
<<- end >>

#############################################
#                all workers                #
#############################################
<<- with .workers >>
workers:
<<- range $name, $config := . >>
  << $name >>:
    paused: true
    replicaCount: << $config.replicaCount | default 1 >>
    image:
      registry: << $config.image.registry | default $.docker.registry | default "" >>/
      repository: << $config.image.repository | default $.projectPath >>
      pullPolicy: << $config.image.pullPolicy | default "IfNotPresent" >>
      # Overrides the image tag whose default is the chart appVersion.
      tag: << $config.image.tag | default "" | quote >>
    env:
      <<- $env := merge (dict "BINARY_NAME" $name) (dict "BINARY_PORT" ($.docker.port | default 3000)) $config.env >>
      <<- toYaml $env | nindent 6 >>
    <<- with $config.envFrom >>
    envFrom:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    envFrom: []
      # - prefix: ""
      #   configMapRef:
      #     name: ""
      #   secretRef:
      #     name: ""
    <<- end >>

    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#probe-v1-core
    << with $config.livenessProbe ->>
    livenessProbe:
      <<- toYaml . | nindent 6 >>
    << else ->>
    livenessProbe: false
      # httpGet:
      #   httpHeaders:
      #     header-name: value
      #   path: /ping
      #   port: 3000
      #   scheme: http
      # initialDelaySeconds: 15
      # periodSeconds: 10
      # successThreshold: 1
      # failureThreshold: 3
    <<- end >>
    <<- with $config.readinessProbe >>
    readinessProbe:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    readinessProbe: false
      # exec:
      #   command: ["ls", "-lart"]
      # initialDelaySeconds: 15
      # periodSeconds: 10
      # successThreshold: 1
      # failureThreshold: 3
    <<- end >>
    <<- with $config.startupProbe >>
    startupProbe:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    startupProbe: false
      # grpc:
      #   port: 3000
      #   service: ""
      # initialDelaySeconds: 15
      # periodSeconds: 10
      # successThreshold: 1
      # failureThreshold: 3
    <<- end >>
    resources:
      limits:
        cpu: << $config.resources.limits.cpu | default "250m" >>
        memory: << $config.resources.limits.memory | default "256Mi" >>
        storage: << $config.resources.limits.storage | default "10Gi" >>
      requests:
        cpu: << $config.resources.requests.cpu | default "50m" >>
        memory: << $config.resources.requests.memory | default "128Mi" >>
        storage: << $config.resources.requests.storage | default "5Gi" >>
    autoscaling:
      enabled: << $config.autoscaling.enabled | default "false" >>
      minReplicas: << $config.autoscaling.minReplicas | default 1 >>
      maxReplicas: << $config.autoscaling.maxReplicas | default 10 >>
      targetCPUUtilizationPercentage: << $config.autoscaling.targetCPUUtilizationPercentage | default 80 >>
      targetMemoryUtilizationPercentage: << $config.autoscaling.targetMemoryUtilizationPercentage | default 80 >>
    restartPolicy: << $config.restartPolicy | default "Always" >>
    <<- with $config.configMap >>
    configMap:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    configMap: {}
      # mountPoint: /etc/config/
      # tpl_folders: # folders to be included in configmap with tpl
      #   - folder_name
      # include_folders: # folders to be included in configmap without tpl
      #   - folder_name
      # data:
      #   name: value
    <<- end >>
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#volume-v1-core
    <<- with $config.volumes >>
    volumes:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    volumes: []
      # - name: ""
      #   configMap:
      #     name: configMapName
      # - name: ""
      #   emptyDir:
      #     medium: ""
      #     sizeLimit: 1Gi
      # - name: ""
      #   persistentVolumeClaim:
      #     claimName: ""
      #     readOnly: false
      # - name: ""
      #   secret: 
      #     secretName: ""
    <<- end >>
    <<- with $config.volumeMounts >>
    volumeMounts:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    volumeMounts: []
      # - mountPath: /etc/config/
      #   name: volume[*].name
      #   readOnly: true
    <<- end >>
    
    << with $config.podAnnotations ->>
    podAnnotations:
      <<- toYaml . | nindent 6 >>
    << else ->>
    podAnnotations: {}
    <<- end >>
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#podsecuritycontext-v1-core
    <<- with $config.podSecurityContext >>
    podSecurityContext:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    podSecurityContext: {}
    <<- end >>
      # fsGroup: 2
      # fsGroupChangePolicy: Always | OnRootMismatch
      # runAsGroup: 1001
      # runAsNonRoot: true
      # runAsUser: 1001
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#securitycontext-v1-core
    <<- with $config.securityContext >>
    securityContext:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    securityContext: {}
      # allowPrivilegeEscalation: false
      # capabilities:
      #   add: []
      #   drop: []
      # privileged: false
      # readOnlyRootFilesystem: true
      # runAsGroup: 1001
      # runAsNonRoot: true
      # runAsUser: 1001
    <<- end >>
    
    << with $config.nodeSelector ->>
    nodeSelector:
      <<- toYaml . | nindent 6 >>
    << else ->>
    nodeSelector: {}
    <<- end >>
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#toleration-v1-core
    <<- with $config.tolerations >>
    tolerations:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    tolerations: []
      # - effect: NoSchedule | PreferNoSchedule | NoExecute
      #   key: ""
      #   operator: Exists | Equal
      #   tolerationSeconds: 600
      #   value: ""
    <<- end >>
    
    # https://kubernetes.io/docs/reference/generated/kubernetes-api/<< $kubeVersion >>/#affinity-v1-core
    <<- with $config.affinity >>
    affinity:
      <<- toYaml . | nindent 6 >>
    <<- else >>
    affinity: {}
    <<- end >>
<< end >>
<<- else >>
workers: {}
<<- end >>

#############################################
#             all dependencies              #
#############################################
<<- range .dependencies >>
<<- if .values >>
<< .name >>:
  <<- toYaml .values | nindent 2 >>
<<- else >>
<< .name >>: {}
<<- end >>
<<- end >>