# Code generated by craft; DO NOT EDIT.

<<- $gobuild := and (not .NoGoreleaser) (gt (len .Clis) 0) (has "golang" .Languages) >>
<<- $docker := and .Docker (gt .Binaries 0) >>
<<- $pages := and (has "pages" .CI.Options) (or (has "hugo" .Languages) (has "nodejs" .Languages)) >>

name: Release
run-name: Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: Dry run
        type: boolean
        default: false

jobs:

  version:
    name: Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: v${{ steps.semantic_release.outputs.new_release_version }}
      release: ${{ steps.release.outputs.release }}
    steps:
      - uses: actions/checkout@v4
      - id: sha
        run: echo "sha=$(echo "$GITHUB_REF_NAME" | sha256sum | cut -c -8)" >> $GITHUB_OUTPUT
      # https://github.com/marketplace/actions/action-for-semantic-release
      - id: semantic_release
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/commit-analyzer
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/github
<<- if has "nodejs" .Languages >>
            @semantic-release/npm
<<- end >>
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
<<- if .License >>
            semantic-release-license
<<- end >>
          ci: false
          dry_run: true
          tag_format: v${version}
          branches: |
            [
              "(master|main)",
              "v+([0-9])",
              { "name": "next", "prerelease": true },
              { "name": "beta", "prerelease": true },
              { "name": "alpha", "prerelease": true },
              { "name": "staging", "prerelease": "beta" },
              { "name": "develop", "prerelease": "alpha" },
              { "name": "${{ github.ref_name }}", "prerelease": "${{ steps.sha.outputs.sha }}" }
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo $VERSION
        env:
          VERSION: v${{ steps.semantic_release.outputs.new_release_version }}
      - id: release
        run: |
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "release=true" >> $GITHUB_OUTPUT
          fi
        env:
          VERSION: ${{ steps.semantic_release.outputs.new_release_version }}

<<- if has "nodejs" .Languages >>

  npm-build:
    name: Npm Build
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v3
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          cache: pnpm
          node-version: lts/*
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build
<<- if has "pages" .CI.Options >>
      - uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: |
            dist
            public
          retention-days: 1
<<- end >>
<<- end >>

<<- if $gobuild >>

  go-build:
    name: Go Build
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: go.mod
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: goreleaser/goreleaser-action@v5
        with:
          args: release --clean --config .goreleaser.yml --skip=validate --skip=announce --skip=publish --snapshot
        env:
          VERSION: ${{ needs.version.outputs.version }}
      - uses: actions/upload-artifact@v4
        with:
          name: executables
          # order is important to filter unwanted globs after the filter or desired globs
          path: |
            dist/*
            !dist/*.json
            !dist/*.yaml
            !dist/*/
          retention-days: 1
<<- end >>

<<- if has "hugo" .Languages >>

  hugo-build:
    name: Hugo Build
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true # fetch Hugo themes (true OR recursive)
          fetch-depth: 0 # fetch all history for .GitInfo and .Lastmod
      - uses: actions/cache@v3
        with:
          path: /home/runner/.cache/hugo_cache
          key: hugo-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            hugo-
      # https://github.com/marketplace/actions/hugo-setup
      - uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: latest
          extended: true
      - run: hugo --gc --minify --destination dist
<<- if has "pages" .CI.Options >>
      - uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: |
            dist
            public
          retention-days: 1
<<- end >>
<<- end >>

<<- if $docker >>

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: version
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - id: image
        run: |
          IMAGE="<< with .Docker.Registry >><< . >>/<< end >>$GITHUB_REPOSITORY"
          if [ "$RELEASE" != "true" ]; then
            IMAGE="$IMAGE/snapshot"
          fi
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
        env:
          RELEASE: ${{ needs.version.outputs.release }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image.outputs.image }}
          labels: |
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.ref.name="${{ github.ref_name }}"
            org.opencontainers.image.version="${{ needs.version.outputs.version }}"
            org.opencontainers.image.revision="${{ github.sha }}"
          tags: |
            type=raw,enable={{is_default_branch}},value=latest
            type=semver,enable=true,pattern={{raw}},value=${{ needs.version.outputs.version }}
            type=semver,enable=${{ needs.version.outputs.release == 'true' }},pattern=v{{major}}.{{minor}},value=${{ needs.version.outputs.version }}
            type=semver,enable=${{ needs.version.outputs.release == 'true' }},pattern=v{{major}},value=${{ needs.version.outputs.version }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
<<- if .Docker.Registry >>
          registry: << .Docker.Registry >>
<<- end >>
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  docker-trivy:
    name: Docker Trivy
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    needs:
      - version
      - docker-build
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@master
        with:
          format: sarif
          ignore-unfixed: false
          image-ref: "${{ needs.docker-build.outputs.image }}:${{ needs.version.outputs.version }}"
          output: trivy-results.sarif
          severity: MEDIUM,HIGH,CRITICAL
        env:
          TRIVY_USERNAME: ${{ github.repository_owner }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}
      - uses: github/codeql-action/upload-sarif@v3
        with:
          category: docker-trivy
          sarif_file: trivy-results.sarif
      - uses: aquasecurity/trivy-action@master
        with:
          exit-code: "1"
          ignore-unfixed: false
          image-ref: "${{ needs.docker-build.outputs.image }}:${{ needs.version.outputs.version }}"
          severity: MEDIUM,HIGH,CRITICAL
        env:
          TRIVY_USERNAME: ${{ github.repository_owner }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}
<<- end >>

<<- if $pages >>

<<- $needs := list >>

<<- if has "nodejs" .Languages >>
<<- $needs = append $needs "npm-build" >>
<<- end >>

<<- if has "hugo" .Languages >>
<<- $needs = append $needs "hugo-build" >>
<<- end >>

  pages:
    name: Pages
    runs-on: ubuntu-latest
    if: github.ref_protected == true
<<- if gt (len $needs) 0 >>
    needs:
<<- range $needs >>
      - << . >>
<<- end >>
<<- end >>
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
          preview: ${{ inputs.dry_run }}
          token: ${{ github.GITHUB_TOKEN }}
<<- end >>

<<- $needs := list >>

<<- if and $gobuild >>
<<- $needs = append $needs "go-build" >>
<<- end >>

<<- if has "nodejs" .Languages >>
<<- $needs = append $needs "npm-build" >>
<<- end >>

<<- if $docker >>
<<- $needs = append $needs "docker-build" >>
<<- end >>

<<- if $pages >>
<<- $needs = append $needs "pages" >>
<<- end >>

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.ref_protected == true
    environment: release
<<- if gt (len $needs) 0 >>
    needs:
<<- range $needs >>
      - << . >>
<<- end >>
<<- end >>
    env:
      GIT_AUTHOR_NAME: ${{ github.triggering_actor }}
      GIT_AUTHOR_EMAIL: ${{ github.triggering_actor }}@users.noreply.github.com
      GIT_COMMITTER_NAME: ${{ github.triggering_actor }}
      GIT_COMMITTER_EMAIL: ${{ github.triggering_actor }}@users.noreply.github.com
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
<<- if $gobuild >>
      - uses: actions/download-artifact@v4
        with:
          name: executables
          path: dist
<<- end >>
      # https://github.com/marketplace/actions/action-for-semantic-release
      - id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/commit-analyzer
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/github
<<- if has "nodejs" .Languages >>
            @semantic-release/npm
<<- end >>
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
<<- if .License >>
            semantic-release-license
<<- end >>
          dry_run: ${{ inputs.dry_run }}
          tag_format: v${version}
          branches: |
            [
              "(master|main)",
              "v+([0-9])",
              { "name": "next", "prerelease": true },
              { "name": "beta", "prerelease": true },
              { "name": "alpha", "prerelease": true },
              { "name": "staging", "prerelease": "beta" },
              { "name": "develop", "prerelease": "alpha" }
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}