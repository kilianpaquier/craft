// Code generated by go-swagger; DO NOT EDIT.

{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}

package {{ .APIPackage }}

import (
  "context"
  "crypto/tls"
  "io"
  "net/http"
  "sync"

  "github.com/go-openapi/errors"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/runtime/middleware"
  "github.com/go-openapi/runtime/security"
  log "github.com/sirupsen/logrus"

  {{ $internal := "internal/api" }}
  internal_api {{ joinPath .TargetImportPath $internal | quote }}
  {{- range .Operations }}
  {{ .Package }}_api {{ joinPath .TargetImportPath $internal .Package | quote }}
  {{- end }}
  {{ imports .DefaultImports }}
  {{ imports .Imports }}
)

func configureFlags(api *{{.APIPackageAlias}}.{{ pascalize .Name }}API) {
  // api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *{{.APIPackageAlias}}.{{ pascalize .Name }}API) http.Handler {
  // configure the api here
  api.ServeError = errors.ServeError

  // Set your custom logger if needed. Default one is log.Printf
  // Expected interface func(string, ...interface{})
  //
  // Example:
  api.Logger = log.Infof

  api.UseSwaggerUI()
  // To continue using redoc as your UI, uncomment the following line
  // api.UseRedoc()

  {{ range .Consumes }}
    {{- if .Implementation }}
  api.{{ pascalize .Name }}Consumer = {{ .Implementation }}
    {{- else }}
  api.{{ pascalize .Name }}Consumer = runtime.ConsumerFunc(func(r io.Reader, target interface{}) error {
    return errors.NotImplemented("{{.Name}} consumer has not yet been implemented")
  })
    {{- end }}
  {{- end }}
  {{ range .Produces }}
    {{- if .Implementation }}
  api.{{ pascalize .Name }}Producer = {{ .Implementation }}
    {{- else }}
  api.{{ pascalize .Name }}Producer = runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
    return errors.NotImplemented("{{.Name}} producer has not yet been implemented")
  })
    {{- end }}
  {{- end}}
  {{ range .SecurityDefinitions }}
    api.{{ pascalize .ID }}Auth = internal_api.{{ pascalize .ID }}Auth
  {{- end }}
  {{- if .SecurityDefinitions }}

  // Set your custom authorizer if needed. Default one is security.Authorized()
  // Expected interface runtime.Authorizer
  //
  // Example:
  // api.APIAuthorizer = security.Authorized()
  {{- end }}

  {{- $package := .Package }}
  {{- $apipackagealias := .APIPackageAlias }}
  {{- range .Operations }}
    {{- if .HasFormParams }}
  // You may change here the memory limit for this multipart form parser. Below is the default (32 MB).
  // {{ if ne .Package $package }}{{ .PackageAlias }}{{ else }}{{ $apipackagealias }}{{ end }}.{{ pascalize .Name }}MaxParseMemory = 32 << 20
    {{- end }}
  {{- end }}
  {{ range .Operations }}
  api.{{ if ne .Package $package }}{{pascalize .Package}}{{ end }}{{ pascalize .Name }}Handler =
    {{- if ne .Package $package }}
      {{- .PackageAlias }}.{{- pascalize .Name }}HandlerFunc(func(params {{ .PackageAlias }}.{{- pascalize .Name }}Params
    {{- else }}
      {{- $apipackagealias }}.{{- pascalize .Name }}HandlerFunc(func(params {{ $apipackagealias }}.{{- pascalize .Name }}Params
    {{- end }}
    {{- if .Authorized}}, principal {{if .PrincipalIsNullable }}*{{ end }}{{.Principal}}{{end}}) middleware.Responder {
      return {{.Package}}_api.{{ pascalize .Name }}(params{{- if .Authorized}}, principal{{end}})
    })
  {{- end }}

  api.PreServerShutdown = internal_api.PreServerShutdown
  api.ServerShutdown = internal_api.ServerShutdown

  return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
  // Make all necessary changes to the TLS configuration here.
}

var startup sync.Once

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix".
func configureServer(s *http.Server, scheme, addr string) {
  startup.Do(internal_api.ServerStartup)
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation.
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics.
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}