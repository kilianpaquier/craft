// Code generated by go-swagger; DO NOT EDIT.

{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}

package main

import (
	"context"

	"github.com/caarlos0/env/v10"
	"github.com/go-openapi/loads"
	log "github.com/sirupsen/logrus"

	{{ imports .DefaultImports }}
	{{ imports .Imports }}
)

{{ if .ExcludeSpec }}
func init() {
	loads.AddLoader(fmts.YAMLMatcher, fmts.YAMLDoc)
}
{{ end }}

type config struct {
	Port uint16 `env:"BINARY_PORT" envDefault:"3000"`
	Host string `env:"BINARY_HOST" envDefault:"0.0.0.0"`
}

func main() {
	ctx := context.Background()
	log := log.WithContext(ctx)

	var c config
	if err := env.Parse(&c); err != nil {
		log.WithError(err).Fatal("failed to load configuration")
	}

{{ if not .ExcludeSpec }}
	swaggerSpec, err := loads.Embedded({{ .ServerPackageAlias }}.SwaggerJSON, {{ .ServerPackageAlias }}.FlatSwaggerJSON)
	if err != nil {
		log.WithError(err).Fatal("failed to load embedded swagger")
	}
{{- end }}

{{ if .ExcludeSpec }}
	server := {{ .ServerPackageAlias }}.NewServer(nil)
	swaggerSpec, err := loads.Spec(string(server.Spec))
	if err != nil {
		log.WithError(err).Fatal("failed to load embedded swagger")
	}

	api := {{.APIPackageAlias}}.New{{ pascalize .Name }}API(swaggerSpec)
	server.SetAPI(api)
{{- else }}
	api := {{.APIPackageAlias}}.New{{ pascalize .Name }}API(swaggerSpec)
	server := {{ .ServerPackageAlias }}.NewServer(api)
{{- end }}

	server.Host = c.Host
	server.Port = int(c.Port)

	defer server.Shutdown()

	server.ConfigureAPI()
	if err := server.Serve(); err != nil {
		log.WithError(err).Fatal("failed to run server")
	}
}