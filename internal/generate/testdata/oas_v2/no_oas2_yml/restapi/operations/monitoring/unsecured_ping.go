// Code generated by go-swagger; DO NOT EDIT.

package monitoring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UnsecuredPingHandlerFunc turns a function with the right signature into a unsecured ping handler
type UnsecuredPingHandlerFunc func(UnsecuredPingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UnsecuredPingHandlerFunc) Handle(params UnsecuredPingParams) middleware.Responder {
	return fn(params)
}

// UnsecuredPingHandler interface for that can handle valid unsecured ping params
type UnsecuredPingHandler interface {
	Handle(UnsecuredPingParams) middleware.Responder
}

// NewUnsecuredPing creates a new http.Handler for the unsecured ping operation
func NewUnsecuredPing(ctx *middleware.Context, handler UnsecuredPingHandler) *UnsecuredPing {
	return &UnsecuredPing{Context: ctx, Handler: handler}
}

/*
	UnsecuredPing swagger:route GET /unsecured/ping Monitoring unsecuredPing

checks API health and retrieves ping result

checks API health and retrieves ping result
*/
type UnsecuredPing struct {
	Context *middleware.Context
	Handler UnsecuredPingHandler
}

func (o *UnsecuredPing) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUnsecuredPingParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
