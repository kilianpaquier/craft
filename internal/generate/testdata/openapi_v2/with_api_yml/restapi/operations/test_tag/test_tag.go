// Code generated by go-swagger; DO NOT EDIT.

package test_tag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// TestTagHandlerFunc turns a function with the right signature into a test tag handler
type TestTagHandlerFunc func(TestTagParams) middleware.Responder

// Handle executing the request and returning a response
func (fn TestTagHandlerFunc) Handle(params TestTagParams) middleware.Responder {
	return fn(params)
}

// TestTagHandler interface for that can handle valid test tag params
type TestTagHandler interface {
	Handle(TestTagParams) middleware.Responder
}

// NewTestTag creates a new http.Handler for the test tag operation
func NewTestTag(ctx *middleware.Context, handler TestTagHandler) *TestTag {
	return &TestTag{Context: ctx, Handler: handler}
}

/*
	TestTag swagger:route GET /unsecured/test-tag TestTag testTag

tests that a tag operation is generated like it would be expected

tests that a tag operation is generated like it would be expected
*/
type TestTag struct {
	Context *middleware.Context
	Handler TestTagHandler
}

func (o *TestTag) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewTestTagParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
