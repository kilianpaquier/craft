// Code generated by go-builder-generator (https://github.com/kilianpaquier/go-builder-generator). DO NOT EDIT.

package tests

import (
	"github.com/kilianpaquier/craft/internal/generate/detectgen"
)

// PackageJSONBuilder represents PackageJSON's builder.
type PackageJSONBuilder struct {
	build detectgen.PackageJSON
}

// NewPackageJSONBuilder creates a new PackageJSONBuilder.
func NewPackageJSONBuilder() *PackageJSONBuilder {
	return &PackageJSONBuilder{}
}

// Copy reassigns the builder struct (behind pointer) to a new pointer and returns it.
func (b *PackageJSONBuilder) Copy() *PackageJSONBuilder {
	return &PackageJSONBuilder{b.build}
}

// Build returns built PackageJSON.
func (b *PackageJSONBuilder) Build() *detectgen.PackageJSON {
	result := b.build
	return &result
}

// Author sets PackageJSON's Author.
func (b *PackageJSONBuilder) Author(author string) *PackageJSONBuilder {
	b.build.Author = &author
	return b
}

// Description sets PackageJSON's Description.
func (b *PackageJSONBuilder) Description(description string) *PackageJSONBuilder {
	b.build.Description = &description
	return b
}

// Files sets PackageJSON's Files.
func (b *PackageJSONBuilder) Files(files []string) *PackageJSONBuilder {
	b.build.Files = files
	return b
}

// Keywords sets PackageJSON's Keywords.
func (b *PackageJSONBuilder) Keywords(keywords []string) *PackageJSONBuilder {
	b.build.Keywords = keywords
	return b
}

// License sets PackageJSON's License.
func (b *PackageJSONBuilder) License(license string) *PackageJSONBuilder {
	b.build.License = &license
	return b
}

// Main sets PackageJSON's Main.
func (b *PackageJSONBuilder) Main(main string) *PackageJSONBuilder {
	b.build.Main = &main
	return b
}

// Module sets PackageJSON's Module.
func (b *PackageJSONBuilder) Module(module string) *PackageJSONBuilder {
	b.build.Module = module
	return b
}

// Name sets PackageJSON's Name.
func (b *PackageJSONBuilder) Name(name string) *PackageJSONBuilder {
	b.build.Name = name
	return b
}

// PackageManagerName sets PackageJSON's PackageManagerName.
func (b *PackageJSONBuilder) PackageManagerName(packageManagerName string) *PackageJSONBuilder {
	b.build.PackageManagerName = packageManagerName
	return b
}

// PackageManagerVersion sets PackageJSON's PackageManagerVersion.
func (b *PackageJSONBuilder) PackageManagerVersion(packageManagerVersion string) *PackageJSONBuilder {
	b.build.PackageManagerVersion = packageManagerVersion
	return b
}

// PackageManagerWithVersion sets PackageJSON's PackageManagerWithVersion.
func (b *PackageJSONBuilder) PackageManagerWithVersion(packageManagerWithVersion string) *PackageJSONBuilder {
	b.build.PackageManagerWithVersion = packageManagerWithVersion
	return b
}

// Private sets PackageJSON's Private.
func (b *PackageJSONBuilder) Private(private bool) *PackageJSONBuilder {
	b.build.Private = private
	return b
}

// Scripts sets PackageJSON's Scripts.
func (b *PackageJSONBuilder) Scripts(scripts map[string]string) *PackageJSONBuilder {
	b.build.Scripts = scripts
	return b
}

// Version sets PackageJSON's Version.
func (b *PackageJSONBuilder) Version(version string) *PackageJSONBuilder {
	b.build.Version = version
	return b
}
