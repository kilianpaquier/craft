# Code generated by craft; DO NOT EDIT.

name: CICD
run-name: CICD

<<- $node := hasKey .Languages "node" >>
<<- $hugo := hasKey .Languages "hugo" >>
<<- $golang := hasKey .Languages "golang" >>

<<- $nodebuild := and $node (gt .Binaries 0) >>
<<- $nodepublish := and $node (not (get .Languages "node").Private) >>

<<- $pages := and (.IsStatic "pages") (or $nodebuild $hugo) >>
<<- $netlify := and (.IsStatic "netlify") (or $nodebuild $hugo) >>

<<- $auth := fromPtr .CI.Auth.Release >>

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  push:
    branches:
      - alpha
      - beta
      - dev
      - develop
      - development
      - next
      - staging
      - main
      - master
      - v[0-9]+.x
      - v[0-9]+.[0-9]+.x
  workflow_dispatch:
    inputs:
      release:
        description: Run release job by checking this box.
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

<<- $checkout := list >>
<<- $plugins := list >>
<<- $envs := list >>

<<- if .CI.Release >>

<<- if eq $auth "github-app" >><<- $checkout = append $checkout "token: ${{ steps.app_token.outputs.token }}">><<- end >>
<<- if ne $auth "github-token" >><<- $checkout = append $checkout "persist-credentials: false">><<- end >>

<<- if $node >><<- $plugins = append $plugins "@semantic-release/npm" >><<- end >>
<<- if .License >><<- $plugins = append $plugins "semantic-release-license" >><<- end >>
<<- if .CI.Release.Backmerge >><<- $plugins = append $plugins "@kilianpaquier/semantic-release-backmerge" >><<- end >>

<<- if eq $auth "github-app" >><<- $envs = append $envs "GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}" >>
<<- else if eq $auth "personal-token" >><<- $envs = append $envs "GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}" >>
<<- else >><<- $envs = append $envs "GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}" >><<- end >>
<<- if $nodepublish >><<- $envs = append $envs "NPM_TOKEN: ${{ secrets.NPM_TOKEN }}" >><<- end >>

<<- end >>

jobs:
  run-workflow:
    name: Run Workflow
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.draft == false && github.ref_protected != true) }}
    steps:
      - id: skip
        run: echo "Running workflow"

<<- if or (gt .Binaries 0) $hugo .Docker >>

  version:
    name: Version
    runs-on: ubuntu-latest
    needs: run-workflow
    if: ${{ github.event_name != 'pull_request' }}
    outputs:
      version: ${{ steps.version.outputs.version }}
    permissions:
<<- if eq $auth "github-token" >>
      contents: write
      issues: write
      pull-requests: write
<<- end >>
      id-token: << if $node >>write<< else >>none<< end >>
    steps:
<<- if .CI.Release >>
<<- if eq $auth "github-app" >>
      - id: app_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.RELEASE_APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
<<- end >>
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
<<- range $checkout >>
          << . >>
<<- end >>
      # https://github.com/marketplace/actions/action-for-semantic-release
      - id: semrel_version
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true
          semantic_version: 24
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/commit-analyzer
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/github
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
<<- range $plugins >>
            << . >>
<<- end >>
        env:
<<- range $envs >>
          << . >>
<<- end >>
      - id: version
        run: |
          if [ "${SEMREL_INFO_NEXT_VERSION}" != "" ]; then
            echo "version=v${SEMREL_INFO_NEXT_VERSION#v}" >> $GITHUB_OUTPUT
          else
            DESCRIBE=$(git describe --tags || echo "v0.0.0")
            echo "version=v${DESCRIBE#v}" >> $GITHUB_OUTPUT
          fi
        env:
          SEMREL_INFO_NEXT_VERSION: ${{ steps.semrel_version.outputs.new_release_version }}
<<- else >>
      - uses: actions/checkout@v4
      - id: version
        run: |
          DESCRIBE=$(git describe --tags || echo "v0.0.0")
          echo "version=v${DESCRIBE#v}" >> $GITHUB_OUTPUT
<<- end >>
      - run: echo ${VERSION}
        env:
          VERSION: ${{ steps.version.outputs.version }}
<<- end >>

<<- if $golang >><< template "golang" . >><<- end >>
<<- if $hugo >><< template "hugo" . >><<- end >>
<<- if $node >><< template "node" . >><<- end >>

<<- if has "sonar" .CI.Options >>

  sonar-analysis:
    name: Sonar Analysis
    runs-on: ubuntu-latest
    needs:
<<- if $golang >>
      - go-lint
      - go-test
<<- end >>
<<- if $node >>
      - node-lint
      - node-test
<<- end >>
    env:
      SONAR_USER_HOME: .sonar
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: reports
      - uses: actions/cache@v4
        with:
          path: ${{ env.SONAR_USER_HOME }}
          key: sonar-cache
      - if: ${{ github.event_name == 'pull_request' }}
        uses: sonarsource/sonarcloud-github-action@master
        with:
          args: |
            -Dproject.settings=sonar.properties
            -Dsonar.pullrequest.base=${{ github.base_ref }}
            -Dsonar.pullrequest.branch=${{ github.head_ref }}
            -Dsonar.pullrequest.key=${{ github.event.issue.number }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - if: ${{ github.event_name == 'push' }}
        uses: sonarsource/sonarcloud-github-action@master
        with:
          args: |
            -Dproject.settings=sonar.properties
            -Dsonar.branch.name=${{ github.ref_name }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
<<- end >>

<<- if .Docker >><< template "docker" . >><<- end >>

<<- $needs := list >>

<<- if $hugo >><<- $needs = append $needs "hugo-build" >><<- end >>

<<- if $golang >>
<<- if gt .Binaries 0 >><<- $needs = append $needs "go-build" >>
<<- else >><<- $needs = append $needs "go-test" >><<- end >>
<<- end >>

<<- if $node >>
<<- if gt .Binaries 0 >><<- $needs = append $needs "node-build" >>
<<- else >><<- $needs = append $needs "node-test" >><<- end >>
<<- end >>

<<- if $netlify >>

  netlify:
    name: Netlify
    runs-on: ubuntu-latest
<<- if .CI.Static.Auto >>
    if: ${{ (github.event_name == 'push' && github.ref_protected) || github.event_name == 'workflow_dispatch' }}
<<- else >>
    if: ${{ github.event_name == 'workflow_dispatch' }}
<<- end >>
    needs:
<<- range $needs >>
      - << . >>
<<- end >>
    environment:
      name: netlify
      url: ${{ steps.netlify.outputs.deploy-url }}
    permissions:
      deployments: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist
      # https://github.com/marketplace/actions/netlify-actions
      - id: branch_sha
        run: |
          echo "branch_sha=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)" >> $GITHUB_OUTPUT
      - id: netlify
        uses: nwtgck/actions-netlify@v3
        with:
          alias: ${{ steps.branch_sha.outputs.branch_sha }}
          deploy-message: ${{ github.ref_name }}
          enable-commit-comment: false
          enable-commit-status: false
          github-deployment-environment: netlify
          github-token: ${{ secrets.GITHUB_TOKEN }}
          netlify-config-path: netlify.toml
          production-branch: ${{ github.event.repository.default_branch }}
          publish-dir: dist
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
<<- end >>

<<- if $pages >>

  pages:
    name: Pages
    runs-on: ubuntu-latest
<<- if .CI.Static.Auto >>
    if: ${{ (github.event_name == 'push' && github.ref_protected) || github.event_name == 'workflow_dispatch' }}
<<- else >>
    if: ${{ github.event_name == 'workflow_dispatch' }}
<<- end >>
    needs:
<<- range $needs >>
      - << . >>
<<- end >>
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      id-token: write
      pages: write
      pull-requests: write
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
          preview: ${{ github.ref_name != github.event.repository.default_branch }}
<<- end >>

<<- if .CI.Release >>

<<- if .Docker >><<- $needs = append $needs "docker-build" >><<- end >>
<<- if $netlify >><<- $needs = append $needs "netlify" >><<- end >>
<<- if $pages >><<- $needs = append $needs "pages" >><<- end >>

  release:
    name: Release
    runs-on: ubuntu-latest
<<- if .CI.Release.Auto >>
    if: ${{ github.event_name != 'pull_request' && github.ref_protected }}
<<- else >>
    if: ${{ github.event_name == 'workflow_dispatch' && github.ref_protected }}
<<- end >>
    environment:
      name: release
      url: ${{ steps.environment_url.outputs.environment_url }}
    needs:<< if eq (len $needs) 0 >> run-workflow<< end >>
<<- range $needs >>
      - << . >>
<<- end >>
    permissions:
<<- if eq $auth "github-token" >>
      contents: write
      issues: write
      pull-requests: write
<<- end >>
      id-token: << if $node >>write<< else >>none<< end >>
    steps:
<<- if eq $auth "github-app" >>
      - id: app_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.RELEASE_APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
<<- end >>
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
<<- range $checkout >>
          << . >>
<<- end >>
<<- if gt .Binaries 0 >>
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist
<<- end >>
      # https://github.com/marketplace/actions/action-for-semantic-release
      - id: semrel_version
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: ${{ inputs.release == 'false' }}
          semantic_version: 24
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/commit-analyzer
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/github
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
<<- range $plugins >>
            << . >>
<<- end >>
        env:
<<- range $envs >>
          << . >>
<<- end >>
      - id: environment_url
        run: |
          if [ "${VERSION}" != "" ]; then
            echo "environment_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/v${VERSION#v}" >> $GITHUB_OUTPUT
          fi
        env:
          VERSION: ${{ steps.semrel_version.outputs.new_release_version }}
<<- end >>