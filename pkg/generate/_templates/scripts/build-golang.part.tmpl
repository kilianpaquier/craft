{{- define "golang" }}

GCI_CONFIG_PATH := .golangci.yml

.PHONY: reports
reports:
	@mkdir -p reports/

.PHONY: lint
lint: reports
	@golangci-lint run -c ${GCI_CONFIG_PATH} --timeout 240s --fast --sort-results \
		--out-format checkstyle:reports/go-ci-lint.checkstyle.xml,colored-line-number $(ARGS) || \
		echo "golangci-lint failed, running 'make lint-fix' may fix some issues"

.PHONY: lint-fix
lint-fix: reports
	@ARGS="--fix" make -s lint

.PHONY: test
test:
	@go test ./... -count 1 -timeout=15s

.PHONY: test-race
test-race:
	@CGO_ENABLED=1 go test ./... -race -timeout=15s

.PHONY: test-cover
test-cover: reports
	@go test ./... -coverpkg="./..." -covermode="count" -coverprofile="reports/go-coverage.native.out" -timeout=15s

{{- $binaries := dict }}
{{- $_ := map $binaries .Clis .Crons .Jobs .Workers }}

{{- if gt .Binaries 0 }}

.PHONY: buildall
buildall:{{ range $name, $config := $binaries }} build-{{ $name }}{{ end }}

.PHONY:{{ range $name, $config := $binaries }} {{ $name }}{{ end }}
build-%:
	@CGO_ENABLED=0 go build -o $* cmd/$*/main.go

.PHONY:{{ range $name, $config := $binaries }} {{ $name }}{{ end }}
local-%:
	@go run cmd/$*/main.go
{{- end }}

{{- if .Docker }}

.PHONY: build-docker
build-docker:
	@docker build -t {{ .ProjectName }} .
{{- end }}
{{- end }}