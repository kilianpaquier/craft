# Code generated by craft; DO NOT EDIT.

name: Version
description: Compute the next release version or release it

<<- $nodejs := hasKey .Languages "nodejs" >>
<<- $hugo := hasKey .Languages "hugo" >>
<<- $golang := hasKey .Languages "golang" >>

<<- $gobuild := and $golang (gt (len .Clis) 0) (not .NoGoreleaser) >>

inputs:
  download_dist:
    description: Whether to build artifact into dist folder or not
    default: false
  dry_run:
    description: Dry run
    default: true
  token:
    description: Github access token
    required: true
<<- if and $nodejs (not (get .Languages "nodejs").Private) (.IsReleaseAction "semantic-release") >>
  npm_token:
    description: Access token for the npm registry
    required: true
<<- end >>
outputs:
  branch_sha: 
    description: The concerned branch sha256 value
    value: ${{ steps.version.outputs.branch_sha }}
  release:
    description: Whether a release can be made or not
    value: ${{ steps.version.outputs.release }}
  version: 
    description: The computed version
    value: ${{ steps.version.outputs.version }}

runs:
  using: composite
  steps:

<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>

<<- if not .CI.Release >>
    - id: version
      run: |
        BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
        echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

        git fetch --tags

        LAST_TAG=$(git tag --list | sort -V | tail -n1)

        NEXT_TAG=${LAST_TAG-1.0.0}
        NEXT_TAG=${NEXT_TAG%-*}

        echo "version=v${NEXT_TAG#v}-build.${BRANCH_SHA}" >> $GITHUB_OUTPUT
        echo "release=false" >> $GITHUB_OUTPUT
    - run: echo $VERSION
      env:
        VERSION: ${{ steps.version.outputs.version }}
<<- end >>

<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>

<<- if .IsReleaseAction "gh-release" >>
<<- /* retrieve dist for go binaries and nodejs dist folder (uploaded with semantic-release to npm registry) */>>
<<- if or $gobuild $nodejs >>
    - uses: actions/download-artifact@v4
      if: ${{ inputs.download_dist == 'true' }}
      with:
        name: build
        path: dist
<<- end >>
    - id: release_check
      run: |
        BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
        echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

        if [ "${GITHUB_REF_NAME}" = "main" ] || [ "${GITHUB_REF_NAME}" = "master" ]; then
          echo "release=true" >> $GITHUB_OUTPUT
        else
          echo "release=false" >> $GITHUB_OUTPUT
        fi
    # https://github.com/marketplace/actions/gh-release
    - id: gh_release
      uses: softprops/action-gh-release@v2
      with:
        draft: ${{ inputs.dry_run != 'false' }}
        files: |
          CHANGELOG.md
<<- if $gobuild >>
          checksums.txt
          dist/*
<<- end >>
        generate_release_notes: true
        prerelease: ${{ needs.release_check.outputs.release == 'false' }}
        target_commitish: ${{ github.ref_name }}
        token: ${{ inputs.token }}
    - uses: actions/github-scripts@v7
      if: ${{ inputs.dry_run != 'false' }} # delete release in case of dry_run since we only desired the next version number
      with:
        script: |
          github.rest.repos.deleteRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ steps.gh_release.outputs.id }}
          })
    - id: version
      run: |
        echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT
        echo "release=${RELEASE}" >> $GITHUB_OUTPUT
        echo "version=${RELEASE_URL##*/}" >> $GITHUB_OUTPUT # remove everything before the last / in the URL (should more or less match the tag name ...)
      env:
        BRANCH_SHA: ${{ steps.release_check.outputs.branch_sha }}
        RELEASE_URL: ${{ steps.gh_release.outputs.url }}
        RELEASE: ${{ steps.release_check.outputs.release }}
    - run: echo $VERSION
      env:
        VERSION: ${{ steps.version.outputs.version }}
<<- end >>

<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>

<<- if .IsReleaseAction "release-drafter" >>
<<- /* retrieve dist for go binaries and nodejs dist folder (uploaded with semantic-release to npm registry) */>>
<<- if or $gobuild $nodejs >>
    - uses: actions/download-artifact@v4
      if: ${{ inputs.download_dist == 'true' }}
      with:
        name: build
        path: dist
<<- end >>
    - id: release_check
      run: |
        BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
        echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

        case "${GITHUB_REF_NAME}" in
          main|master)
            echo "release=true" >> $GITHUB_OUTPUT
            ;;
          beta|staging)
            echo "release=false" >> $GITHUB_OUTPUT
            echo "identifier=beta" >> $GITHUB_OUTPUT
            ;;
          alpha|dev|develop|development)
            echo "release=false" >> $GITHUB_OUTPUT
            echo "identifier=alpha" >> $GITHUB_OUTPUT
            ;;
          next)
            echo "release=false" >> $GITHUB_OUTPUT
            echo "identifier=next" >> $GITHUB_OUTPUT
            ;;
        esac
    # https://github.com/marketplace/actions/release-drafter
    - id: drafter
      uses: release-drafter/release-drafter@v6
      with:
        commitish: ${{ github.ref_name }}
        config-name: release-drafter.yml
        disable-autolabeler: true # labeling is delt with in another workflow
        latest: ${{ steps.release_check.outputs.release == 'true' }}
        name: v$RESOLVED_VERSION
        prerelease-identifier: ${{ steps.release_check.outputs.identifier }}
        prerelease: ${{ steps.release_check.outputs.release != 'true' }}
        publish: ${{ inputs.dry_run == 'false' }}
        tag: v$RESOLVED_VERSION
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
    - id: version
      run: |
        echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT
        echo "release=${RELEASE}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
      env:
        VERSION: ${{ steps.drafter.outputs.tag_name }}
        RELEASE: ${{ steps.release_check.outputs.release }}
        BRANCH_SHA: ${{ steps.release_check.outputs.branch_sha }}
    - uses: softprops/action-gh-release@v2
      if: ${{ inputs.dry_run == 'false' }}
      with:
        draft: false # run is not in dry_run mode
        files: |
          CHANGELOG.md
<<- if $gobuild >>
          checksums.txt
          dist/*
<<- end >>
        generate_release_notes: false
        prerelease: ${{ steps.version.outputs.release != 'true' }}
        tag_name: ${{ steps.version.outputs.version }}
        target_commitish: ${{ github.ref_name }}
        token: ${{ inputs.token }}
    - uses: actions/github-scripts@v7
      if: ${{ inputs.dry_run != 'false' }} # delete release in case of dry_run since we only desired the next version number
      with:
        script: |
          github.rest.repos.deleteRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ steps.drafter.outputs.id }}
          })
    - run: echo $VERSION
      env:
        VERSION: ${{ steps.version.outputs.version }}
<<- end >>

<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>

<<- if .IsReleaseAction "semantic-release" >>
<<- /* retrieve dist for go binaries and nodejs dist folder (uploaded with semantic-release to npm registry) */>>
<<- if or $gobuild $nodejs >>
    - uses: actions/download-artifact@v4
      if: ${{ inputs.download_dist == 'true' }}
      with:
        name: build
        path: dist
<<- end >>
    # https://github.com/marketplace/actions/action-for-semantic-release
    - id: semrel_version
      continue-on-error: true
      uses: cycjimmy/semantic-release-action@v4
      with:
        semantic_version: 24
        extra_plugins: |
          @semantic-release/changelog
          @semantic-release/commit-analyzer
          @semantic-release/exec
          @semantic-release/git
          @semantic-release/github
<<- if $nodejs >>
          @semantic-release/npm
<<- end >>
          @semantic-release/release-notes-generator
          conventional-changelog-conventionalcommits
<<- if .License >>
          semantic-release-license
<<- end >>
<<- if .CI.Release.Backmerge >>
          @kilianpaquier/semantic-release-backmerge
<<- end >>
        dry_run: ${{ inputs.dry_run != 'false' }}
        tag_format: v${version}
        branches: |
          [
            "(master|main)",
            "v+([0-9])?(.{+([0-9]),x}).x",
            { "name": "next", "prerelease": true },
            { "name": "beta", "prerelease": true },
            { "name": "alpha", "prerelease": true },
            { "name": "staging", "prerelease": "beta" },
            { "name": "(dev|develop|development)", "prerelease": "alpha" }
          ]
      env:
        GITHUB_TOKEN: ${{ inputs.token }}
<<- if $nodejs >>
<<- if not (get .Languages "nodejs").Private >>
        NPM_TOKEN: ${{ inputs.npm_token }}
<<- end >>
<<- end >>
    - id: version
      run: |
        BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
        echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

        if echo "$SEMREL_INFO_NEXT_VERSION" | grep -Eq "^[0-9]+(\.[0-9]+){2}.*$"; then
          echo "version=v$SEMREL_INFO_NEXT_VERSION" >> $GITHUB_OUTPUT
          if echo "$SEMREL_INFO_NEXT_VERSION" | grep -Eq "^[0-9]+(\.[0-9]+){2}$"; then
            echo "release=true" >> $GITHUB_OUTPUT
          else
            echo "release=false" >> $GITHUB_OUTPUT
          fi
          return 0
        fi

        git fetch --tags

        SEMREL_INFO_LAST_VERSION=$(git tag --list | sort -V | tail -n1)

        SEMREL_INFO_NEXT_VERSION=${SEMREL_INFO_LAST_VERSION-1.0.0}
        SEMREL_INFO_NEXT_VERSION=${SEMREL_INFO_NEXT_VERSION%-*}

        echo "version=v${SEMREL_INFO_NEXT_VERSION#v}-build.${BRANCH_SHA}" >> $GITHUB_OUTPUT
        echo "release=false" >> $GITHUB_OUTPUT
      env:
        SEMREL_INFO_LAST_VERSION: ${{ steps.semrel_version.outputs.last_release_version }}
        SEMREL_INFO_NEXT_VERSION: ${{ steps.semrel_version.outputs.new_release_version }}
    - run: echo $VERSION
      env:
        VERSION: ${{ steps.version.outputs.version }}
<<- end >>

<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>
<<- /* *********************************************************************************************** */ ->>