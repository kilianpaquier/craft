# Code generated by craft; DO NOT EDIT.

name: Release
run-name: Release

<<- $nodejs := hasKey .Languages "nodejs" >>
<<- $hugo := hasKey .Languages "hugo" >>
<<- $golang := hasKey .Languages "golang" >>

<<- $gocli := and $golang (gt (len .Clis) 0) (not .NoGoreleaser) >>
<<- $nodepublish := and $nodejs (not (get .Languages "nodejs").Private) >>
<<- $docker := and .Docker (gt .Binaries 0) >>

<<- $pages := and (.IsStatic "pages") (or $nodejs $hugo) >>
<<- $netlify := and (.IsStatic "netlify") (or $nodejs $hugo) >>

<<- $auth := fromPtr .CI.Auth.Release >>

on:
  workflow_dispatch:
    inputs:
      mode:
        description: Whether to only make a dry_run or to make the release completely
        type: choice
        default: dry_run
        options:
          - dry_run
          - release
<<- if .IsAutoRelease >>
  push:
    branches:
      - main
      - master
      - v[0-9]+.x
      - v[0-9]+.[0-9]+.x
<<- end >>

jobs:

  version:
    name: Version
    runs-on: ubuntu-latest
    if: ${{ github.ref_protected }}
    environment: release
<<- if or (eq $auth "github-token") $nodejs >>
    permissions:
<<- if eq $auth "github-token" >>
      contents: write
      issues: write
      pull-requests: write
<<- end >>
<<- if $nodejs >>
      id-token: write
<<- end >>
<<- end >>
    outputs:
      mode: ${{ steps.mode.outputs.mode }}
      release: ${{ steps.version.outputs.release }}
      version: ${{ steps.version.outputs.version }}
    steps:
<<- if eq $auth "github-app" >>
      - id: app_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.RELEASE_APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
<<- end >>
      - uses: actions/checkout@v4
<<- if or (.CI.Release.Backmerge) (ne $auth "github-token") >>
        with:
<<- if .CI.Release.Backmerge >>
          fetch-depth: 0
<<- end >>
<<- if eq $auth "github-app" >>
          token: ${{ steps.app_token.outputs.token }}
<<- end >>
<<- if ne $auth "github-token" >>
          persist-credentials: false
<<- end >>
<<- end >>
      - id: version
        uses: ./.github/actions/version
        with:
          mode: dry_run # compute only the version to build
<<- if eq $auth "github-app" >>
          token: ${{ steps.app_token.outputs.token }}
<<- else if eq $auth "personal-token" >>
          token: ${{ secrets.RELEASE_TOKEN }}
<<- else >>
          token: ${{ secrets.GITHUB_TOKEN }}
<<- end >>
<<- if $nodepublish >>
          npm_token: ${{ secrets.NPM_TOKEN }}
<<- end >>
      - id: mode
        run: |
          if [ "$GITHUB_EVENT_NAME" = "push" ]; then
            echo "mode=release" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "mode=${INPUT_MODE}" >> $GITHUB_OUTPUT
        env:
          INPUT_MODE: ${{ inputs.mode }}

<<- if $gocli >>

  golang:
    name: Golang
    needs: version
    uses: ./.github/workflows/golang.yml
    permissions:
      checks: write
    with:
      build: true
      version: ${{ needs.version.outputs.version }}
    secrets: inherit
<<- end >>

<<- if $nodepublish >>

  node:
    name: Node
    uses: ./.github/workflows/nodejs.yml
    with:
      build: true
    secrets: inherit
<<- end >>

<<- if $docker >>

  docker:
    name: Docker
    needs: version
    uses: ./.github/workflows/docker.yml
    permissions:
      contents: write
      issues: write
      pull-requests: write
<<- if $nodejs >>
      id-token: write
<<- end >>
      security-events: write
    with:
      version: ${{ needs.version.outputs.version }}
      release: ${{ needs.version.outputs.release == 'true' }}
    secrets: inherit
<<- end >>

<<- if $netlify >>

  netlify:
    name: Netlify
    uses: ./.github/workflows/netlify.yml
    permissions:
      deployments: write
      pull-requests: write
    secrets: inherit
<<- end >>

<<- if $pages >>

  pages:
    name: Pages
    uses: ./.github/workflows/pages.yml
    permissions:
      pages: write
      id-token: write
<<- end >>

  release:
    name: Release
    runs-on: ubuntu-latest
    environment: release
<<- if or (eq $auth "github-token") $nodejs >>
    permissions:
<<- if eq $auth "github-token" >>
      contents: write
      issues: write
      pull-requests: write
<<- end >>
<<- if $nodejs >>
      id-token: write
<<- end >>
<<- end >>
    needs:
      - version
<<- if $gocli >>
      - golang
<<- end >>
<<- if $nodepublish >>
      - node
<<- end >>
<<- if $docker >>
      - docker
<<- end >>
<<- if $netlify >>
      - netlify
<<- end >>
<<- if $pages >>
      - pages
<<- end >>
    steps:
<<- if eq $auth "github-app" >>
      - id: app_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.RELEASE_APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
<<- end >>
      - uses: actions/checkout@v4
<<- if or (.CI.Release.Backmerge) (ne $auth "github-token") >>
        with:
<<- if .CI.Release.Backmerge >>
          fetch-depth: 0
<<- end >>
<<- if eq $auth "github-app" >>
          token: ${{ steps.app_token.outputs.token }}
<<- end >>
<<- if ne $auth "github-token" >>
          persist-credentials: false
<<- end >>
<<- end >>
      - uses: ./.github/actions/version
        with:
          download_dist: true
          mode: ${{ needs.version.outputs.mode }}
<<- if eq $auth "github-app" >>
          token: ${{ steps.app_token.outputs.token }}
<<- else if eq $auth "personal-token" >>
          token: ${{ secrets.RELEASE_TOKEN }}
<<- else >>
          token: ${{ secrets.GITHUB_TOKEN }}
<<- end >>
<<- if $nodepublish >>
          npm_token: ${{ secrets.NPM_TOKEN }}
<<- end >>