# Code generated by craft; DO NOT EDIT.

<<- $nodejs := hasKey .Languages "nodejs" >>
<<- $hugo := hasKey .Languages "hugo" >>
<<- $golang := hasKey .Languages "golang" >>

<<- $gobuild := and $golang (gt (len .Clis) 0) (not .NoGoreleaser) >>
<<- $docker := and .Docker (gt .Binaries 0) >>

<<- $pages := and (has "pages" .CI.Options) (or $nodejs $hugo) >>
<<- $netlify := and (has "netlify" .CI.Options) (or $nodejs $hugo) >>

name: Release
run-name: Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: Dry run
        type: boolean
        default: false
<<- if .CI.Release.Auto >>
  push:
    branches:
      - main
      - master
      - staging
      - dev
      - develop
      - development
      - next
      - beta
      - alpha
<<- if eq .CI.Release.Action "semantic-release" >>
      - v[0-9]+.x
      - v[0-9]+.[0-9]+.x
<<- end >>
<<- end >>

<<- if eq .CI.Release.Action "release-drafter" >>
  pull_request: # autolabeler on project pull requests (will only run version job)
    types: [opened, reopened, synchronize]
  pull_request_target: # autolabeler on fork pull requests (will only run version job)
    types: [opened, reopened, synchronize]
<<- end >>

jobs:

  version:
    name: Version
    runs-on: ubuntu-latest

<<- if eq .CI.Release.Action "release-drafter" >>
    outputs:
      branch_sha: ${{ steps.release.outputs.branch_sha }}
      identifier: ${{ steps.release.outputs.identifier }}
      release: ${{ steps.release.outputs.release }}
      version: ${{ steps.drafter.outputs.tag_name }}
    permissions:
      contents: write # create release
      pull-requests: write # autolabeler
    steps:
      - uses: actions/checkout@v4
      - id: release
        run: |
          BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
          echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

          case "${GITHUB_REF_NAME}" in
            main|master)
              echo "release=true" >> $GITHUB_OUTPUT
              echo "latest=true" >> $GITHUB_OUTPUT
              ;;
            beta|staging)
              echo "identifier=beta" >> $GITHUB_OUTPUT
              ;;
            alpha|dev|develop|development)
              echo "identifier=alpha" >> $GITHUB_OUTPUT
              ;;
            next)
              echo "identifier=next" >> $GITHUB_OUTPUT
              ;;
          esac
      # https://github.com/marketplace/actions/release-drafter
      - id: drafter
        uses: release-drafter/release-drafter@v6
        with:
          commitish: ${{ github.ref_name }}
          config-name: release-drafter.yml
          latest: ${{ steps.release.outputs.release == 'true' }}
          name: v$RESOLVED_VERSION
          prerelease-identifier: ${{ steps.release.outputs.identifier }}
          prerelease: ${{ steps.release.outputs.release != 'true' }}
          publish: false
          tag: v$RESOLVED_VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo $VERSION
        env:
          VERSION: ${{ steps.drafter.outputs.tag_name }}
<<- end >>

<<- if eq .CI.Release.Action "gh-release" >>
    outputs:
      branch_sha: ${{ steps.release.outputs.branch_sha }}
      release: ${{ steps.release.outputs.release }}
      version: ${{ steps.release.outputs.version }}
    permissions:
      contents: write # create release
    steps:
      - uses: actions/checkout@v4
      # https://github.com/marketplace/actions/gh-release
      - id: gh-release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          generate_release_notes: true
          prerelease: ${{ needs.version.outputs.release != 'true' }}
          target_commitish: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - id: release
        run: |
          BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
          echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

          if [ "${GITHUB_REF_NAME}" = "main" ] || [ "${GITHUB_REF_NAME}" = "master" ]; then
            echo "release=true" >> $GITHUB_OUTPUT
          fi

          echo "version=${RELEASE_URL##*/}" >> $GITHUB_OUTPUT # remove everything before the last / in the URL (should more or less match the tag name ...)
        env:
          RELEASE_URL: ${{ steps.gh-release.outputs.url }}
      - run: echo $VERSION
        env:
          VERSION: ${{ steps.release.outputs.version }}
<<- end >>

<<- if eq .CI.Release.Action "semantic-release" >>
    outputs:
      branch_sha: ${{ steps.release.outputs.branch_sha }}
      release: ${{ steps.release.outputs.release }}
      version: ${{ steps.release.outputs.version }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
<<- if .CI.Release.Backmerge >>
        with:
          fetch-depth: 0
<<- end >>
      # https://github.com/marketplace/actions/action-for-semantic-release
      - id: semantic_release
        continue-on-error: true
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 23
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/commit-analyzer
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/github
<<- if $nodejs >>
            @semantic-release/npm
<<- end >>
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
<<- if .License >>
            semantic-release-license
<<- end >>
<<- if .CI.Release.Backmerge >>
            @kilianpaquier/semantic-release-backmerge
<<- end >>
          dry_run: true
          tag_format: v${version}
          branches: |
            [
              "(master|main)",
              "v+([0-9])?(.{+([0-9]),x}).x",
              { "name": "next", "prerelease": true },
              { "name": "beta", "prerelease": true },
              { "name": "alpha", "prerelease": true },
              { "name": "staging", "prerelease": "beta" },
              { "name": "(dev|develop|development)", "prerelease": "alpha" }
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
<<- if $nodejs >>
<<- $specifics := get .Languages "nodejs" >>
<<- if not $specifics.Private >>
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
<<- end >>
<<- end >>
      - id: release
        run: |
          BRANCH_SHA=$(echo "${GITHUB_REF_NAME}" | sha256sum | cut -c -8)
          echo "branch_sha=${BRANCH_SHA}" >> $GITHUB_OUTPUT

          if echo "$SEMREL_INFO_NEXT_VERSION" | grep -Eq "^[0-9]+(\.[0-9]+){2}.*$"; then
            echo "version=v$SEMREL_INFO_NEXT_VERSION" >> $GITHUB_OUTPUT
            echo "$SEMREL_INFO_NEXT_VERSION" | grep -Eq "^[0-9]+(\.[0-9]+){2}$" && echo "release=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          git fetch --tags

          SEMREL_INFO_LAST_VERSION=$(git tag --list | sort -V | tail -n1)

          SEMREL_INFO_NEXT_VERSION=${SEMREL_INFO_LAST_VERSION-1.0.0}
          SEMREL_INFO_NEXT_VERSION=${SEMREL_INFO_NEXT_VERSION%-*}

          echo "version=v${SEMREL_INFO_NEXT_VERSION#v}-build.${BRANCH_SHA}" >> $GITHUB_OUTPUT
        env:
          SEMREL_INFO_LAST_VERSION: ${{ steps.semantic_release.outputs.last_release_version }}
          SEMREL_INFO_NEXT_VERSION: ${{ steps.semantic_release.outputs.new_release_version }}
      - run: echo $VERSION
        env:
          VERSION: ${{ steps.release.outputs.version }}
<<- end >>

<<- if $nodejs >>

<<- $specifics := get .Languages "nodejs" >>
<<- $manager := cutAfter $specifics.PackageManager "@" >>

  node-build:
    name: Node Build
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event_name, 'pull_request') }}
    needs: version
<<- if and (ne .CI.Release.Action "semantic-release") (not $specifics.Private) >>
    environment: release
    permissions:
      id-token: write
<<- end >>
    steps:
      - uses: actions/checkout@v4
<<- if eq $manager "pnpm" >>
      - uses: pnpm/action-setup@v4
<<- end >>
<<- if eq $manager "bun" >>
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: package.json
<<- else >>
      - uses: actions/setup-node@v4
        with:
          cache: << $manager >>
          node-version: lts/*
<<- end >>
<<- if eq $manager "npm" >>
      - run: << $manager >> ci
<<- else >>
      - run: << $manager >> install --frozen-lockfile
<<- end >>
      - run: << $manager >> run build
<<- if has "pages" .CI.Options >>
      - uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: dist
          retention-days: 1
<<- end >>
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist
          retention-days: 1
<<- if and (ne .CI.Release.Action "semantic-release") (not $specifics.Private) >>
      # https://github.com/marketplace/actions/npm-publish
      - uses: JS-DevTools/npm-publish@v3
        with:
          dry-run: ${{ inputs.dry_run }}
          tag: ${{ needs.version.outputs.version }}
          token: ${{ secrets.NPM_TOKEN }}
<<- end >>
<<- end >>

<<- if $gobuild >>

  go-build:
    name: Go Build
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event_name, 'pull_request') }}
    needs: version
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: go.mod
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean --config .goreleaser.yml --skip=validate --skip=announce --skip=publish --snapshot
        env:
          VERSION: ${{ needs.version.outputs.version }}
      - uses: actions/upload-artifact@v4
        with:
          name: build
          # order is important to filter unwanted globs after the filter or desired globs
          path: |
            dist/*
            !dist/*.json
            !dist/*.yaml
            !dist/*/
          retention-days: 1
<<- end >>

<<- if $hugo >>

  hugo-build:
    name: Hugo Build
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event_name, 'pull_request') }}
    needs: version
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true # fetch Hugo themes (true OR recursive)
          fetch-depth: 0 # fetch all history for .GitInfo and .Lastmod
      - uses: actions/cache@v4
        with:
          path: /home/runner/.cache/hugo_cache
          key: hugo-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            hugo-
      # https://github.com/marketplace/actions/hugo-setup
      - uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: latest
          extended: true
      - run: hugo --gc --minify --destination dist
<<- if has "pages" .CI.Options >>
      - uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: dist
          retention-days: 1
<<- end >>
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist
          retention-days: 1
<<- end >>

<<- if $docker >>

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event_name, 'pull_request') }}
    environment: docker
    needs: version
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - id: image
        run: |
          IMAGE="<< with .Docker.Registry >><< . >>/<< end >>$GITHUB_REPOSITORY"
          if [ "$RELEASE" != "true" ]; then
            IMAGE="$IMAGE/snapshot"
          fi
          echo "image=$IMAGE" >> $GITHUB_OUTPUT
        env:
          RELEASE: ${{ needs.version.outputs.release }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image.outputs.image }}
          labels: |
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.ref.name="${{ github.ref_name }}"
            org.opencontainers.image.version="${{ needs.version.outputs.version }}"
            org.opencontainers.image.revision="${{ github.sha }}"
          tags: |
            type=raw,enable={{is_default_branch}},value=latest
            type=semver,enable=true,pattern={{raw}},value=${{ needs.version.outputs.version }}
            type=semver,enable=${{ needs.version.outputs.release == 'true' }},pattern=v{{major}}.{{minor}},value=${{ needs.version.outputs.version }}
            type=semver,enable=${{ needs.version.outputs.release == 'true' }},pattern=v{{major}},value=${{ needs.version.outputs.version }}
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
<<- if .Docker.Registry >>
          registry: << .Docker.Registry >>
<<- end >>
          username: ${{ github.repository_owner }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  docker-trivy:
    name: Docker Trivy
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event_name, 'pull_request') }}
    environment: docker
    permissions:
      security-events: write
    needs:
      - version
      - docker-build
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@master
        with:
          format: sarif
          ignore-unfixed: false
          image-ref: "${{ needs.docker-build.outputs.image }}:${{ needs.version.outputs.version }}"
          output: trivy-results.sarif
          severity: MEDIUM,HIGH,CRITICAL
        env:
          TRIVY_USERNAME: ${{ github.repository_owner }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}
      - uses: github/codeql-action/upload-sarif@v3
        with:
          category: docker-trivy
          sarif_file: trivy-results.sarif
      - uses: aquasecurity/trivy-action@master
        with:
          exit-code: "1"
          ignore-unfixed: false
          image-ref: "${{ needs.docker-build.outputs.image }}:${{ needs.version.outputs.version }}"
          severity: MEDIUM,HIGH,CRITICAL
        env:
          TRIVY_USERNAME: ${{ github.repository_owner }}
          TRIVY_PASSWORD: ${{ secrets.REGISTRY_TOKEN }}
<<- end >>

<<- if $pages >>

<<- $needs := list >>

<<- if $nodejs >>
<<- $needs = append $needs "node-build" >>
<<- end >>

<<- if $hugo >>
<<- $needs = append $needs "hugo-build" >>
<<- end >>

  pages:
    name: Pages
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == github.event.repository.default_branch && ! startsWith(github.event_name, 'pull_request') }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
<<- if gt (len $needs) 0 >>
    needs:
<<- range $needs >>
      - << . >>
<<- end >>
<<- end >>
    permissions:
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages
          preview: ${{ inputs.dry_run }}
<<- end >>

<<- if $netlify >>

<<- $needs := list >>

<<- if $nodejs >>
<<- $needs = append $needs "node-build" >>
<<- end >>

<<- if $hugo >>
<<- $needs = append $needs "hugo-build" >>
<<- end >>

  netlify:
    name: Netlify
    runs-on: ubuntu-latest
    if: ${{ ! startsWith(github.event_name, 'pull_request') }}
    environment: netlify
    needs:
      - version
<<- range $needs >>
      - << . >>
<<- end >>
    permissions:
      deployments: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        name: build
        path: dist
    - uses: nwtgck/actions-netlify@v3
      with:
        alias: ${{ needs.version.outputs.branch_sha }}
        deploy-message: ${{ github.ref_name }}
        enable-commit-comment: false
        enable-commit-status: false
        github-deployment-environment: netlify
        github-token: ${{ secrets.GITHUB_TOKEN }}
        netlify-config-path: netlify.toml
        production-branch: ${{ github.event.repository.default_branch }}
        publish-dir: dist
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
<<- end >>

<<- $needs := list >>
<<- $needs = append $needs "version" >>

<<- if $gobuild >>
<<- $needs = append $needs "go-build" >>
<<- end >>

<<- if $nodejs >>
<<- $needs = append $needs "node-build" >>
<<- end >>

<<- if $docker >>
<<- $needs = append $needs "docker-build" >>
<<- end >>

<<- if $hugo >>
<<- $needs = append $needs "hugo-build" >>
<<- end >>

<<- if $pages >>
<<- $needs = append $needs "pages" >>
<<- end >>

<<- if $netlify >>
<<- $needs = append $needs "netlify" >>
<<- end >>

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ github.ref_protected && ! startsWith(github.event_name, 'pull_request') }}
    environment: release
    needs:
<<- range $needs >>
      - << . >>
<<- end >>

<<- if eq .CI.Release.Action "release-drafter" >>
    permissions:
      contents: write # create release
      pull-requests: write # autolabeler
    steps:
      - uses: actions/checkout@v4
<<- /* retrieve dist for go binaries and nodejs dist folder (uploaded with semantic-release to npm registry) */>>
<<- if or $gobuild $nodejs >>
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist
<<- end >>
      # https://github.com/marketplace/actions/release-drafter
      - id: drafter
        uses: release-drafter/release-drafter@v6
        with:
          commitish: ${{ github.ref_name }}
          config-name: release-drafter.yml
          latest: ${{ needs.version.outputs.release == 'true' }}
          name: v$RESOLVED_VERSION
          prerelease-identifier: ${{ needs.version.outputs.identifier }}
          prerelease: ${{ needs.version.outputs.release != 'true' }}
          publish: ${{ ! inputs.dry_run }}
          tag: v$RESOLVED_VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: echo $VERSION
        env:
          VERSION: ${{ steps.drafter.outputs.tag_name }}
      # https://github.com/marketplace/actions/gh-release
      - uses: softprops/action-gh-release@v2
        with:
          draft: ${{ inputs.dry_run }}
          files: |
            CHANGELOG.md
            checksums.txt
<<- if $gobuild >>
            dist/*
<<- end >>
          prerelease: ${{ needs.version.outputs.release != 'true' }}
          tag_name: ${{ steps.drafter.outputs.tag_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
<<- end >>

<<- if eq .CI.Release.Action "gh-release" >>
    permissions:
      contents: write # create release
    steps:
      - uses: actions/checkout@v4
<<- /* retrieve dist for go binaries and nodejs dist folder (uploaded with semantic-release to npm registry) */>>
<<- if or $gobuild $nodejs >>
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist
<<- end >>
      # https://github.com/marketplace/actions/gh-release
      - uses: softprops/action-gh-release@v2
        with:
          draft: ${{ inputs.dry_run }}
          files: |
            CHANGELOG.md
            checksums.txt
<<- if $gobuild >>
            dist/*
<<- end >>
          generate_release_notes: true
          prerelease: ${{ needs.version.outputs.release != 'true' }}
          target_commitish: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
<<- end >>

<<- if eq .CI.Release.Action "semantic-release" >>
<<- if or $nodejs (eq .CI.Release.Mode "github-token") >>
    permissions:
<<- if eq .CI.Release.Mode "github-token" >>
      contents: write
      issues: write
      pull-requests: write
<<- end >>
<<- if $nodejs >>
      id-token: write
<<- end >>
<<- end >>
    steps:
<<- if eq .CI.Release.Mode "github-apps" >>
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.RELEASE_APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
<<- end >>
      - uses: actions/checkout@v4
<<- if or (.CI.Release.Backmerge) (ne .CI.Release.Mode "github-token") >>
        with:
<<- if .CI.Release.Backmerge >>
          fetch-depth: 0
<<- end >>
<<- if eq .CI.Release.Mode "github-apps" >>
          token: ${{ steps.app-token.outputs.token }}
<<- end >>
<<- if ne .CI.Release.Mode "github-token" >>
          persist-credentials: false
<<- end >>
<<- end >>
<<- /* retrieve dist for go binaries and nodejs dist folder (uploaded with semantic-release to npm registry) */>>
<<- if or $gobuild $nodejs >>
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist
<<- end >>
      # https://github.com/marketplace/actions/action-for-semantic-release
      - id: semantic_release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 23
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/commit-analyzer
            @semantic-release/exec
            @semantic-release/git
            @semantic-release/github
<<- if $nodejs >>
            @semantic-release/npm
<<- end >>
            @semantic-release/release-notes-generator
            conventional-changelog-conventionalcommits
<<- if .License >>
            semantic-release-license
<<- end >>
<<- if .CI.Release.Backmerge >>
            @kilianpaquier/semantic-release-backmerge
<<- end >>
          dry_run: ${{ inputs.dry_run }}
          tag_format: v${version}
          branches: |
            [
              "(master|main)",
              "v+([0-9])?(.{+([0-9]),x}).x",
              { "name": "next", "prerelease": true },
              { "name": "beta", "prerelease": true },
              { "name": "alpha", "prerelease": true },
              { "name": "staging", "prerelease": "beta" },
              { "name": "(dev|develop|development)", "prerelease": "alpha" }
            ]
        env:
<<- if eq .CI.Release.Mode "github-apps" >>
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
<<- else if eq .CI.Release.Mode "personal-token" >>
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
<<- else >>
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
<<- end >>
<<- if $nodejs >>
<<- $specifics := get .Languages "nodejs" >>
<<- if not $specifics.Private >>
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
<<- end >>
<<- end >>
      - run: echo $VERSION
        env:
          VERSION: ${{ steps.semantic_release.outputs.new_release_version }}
<<- end >>